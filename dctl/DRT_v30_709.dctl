DEFINE_UI_PARAMS(toneCurve, Tone Curve, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(compressChroma, Compress Chroma, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(gamutCompress, Gamut Compress, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(JMhOut, Diagnostic JMh Output, DCTLUI_CHECK_BOX, 0)

typedef struct
{
    float3 x;
    float3 y;
    float3 z;
} float3x3;

__CONSTANT__ float3x3 MATRIX_16 = {
    {-0.32119474, -0.23319618, -0.01719972},
    {-0.0910343 ,  0.44249129,  0.06447764},
    { 0.02945856, -0.10641155,  0.40821152}
};

__CONSTANT__ float3x3 MATRIX_INVERSE_16 = {
    {-2.70657868, -1.40060996,  0.10718864},
    {-0.56387056,  1.88543648, -0.32156592},
    { 0.04833176,  0.59256575,  2.35815011}
};

__CONSTANT__ float3x3 identity_matrix = {
    { 1.0f, 0.0f, 0.0f},
    { 0.0f, 1.0f, 0.0f},
    { 0.0f, 0.0f, 1.0f}
};

__CONSTANT__ float3x3 XYZ_to_LMS_CAT02 = {
    { 0.7328,  0.4296, -0.1624},
    {-0.7036,  1.6975,  0.0061},
    { 0.0030,  0.0136,  0.9834}
};

__CONSTANT__ float3x3 LMS_to_XYZ_CAT02 = {
    { 1.0961238208, -0.2788690002,  0.1827451794},
    { 0.4543690420,  0.4735331543,  0.0720978037},
    {-0.0096276087, -0.0056980312,  1.0153256400}
};

__CONSTANT__ float3x3 XYZ_to_AP0_ACES_matrix = {
    { 1.0498110175f,  0.0000000000f, -0.0000974845f},
    {-0.4959030231f,  1.3733130458f,  0.0982400361f},
    { 0.0000000000f,  0.0000000000f,  0.9912520182f}
};

__CONSTANT__ float3x3 AP0_ACES_to_XYZ_matrix = {
    { 0.9525523959f,  0.0000000000f,  0.0000936786},
    { 0.3439664498f,  0.7281660966f, -0.0721325464},
    { 0.0000000000f,  0.0000000000f,  1.0088251844}
};

__CONSTANT__ float3x3 panlrcm = {
    { 460.0f,  451.0f,  288.0f},
    { 460.0f, -891.0f, -261.0f},
    { 460.0f, -220.0f, -6300.0f},
};

// XYZ to sRGB matrix
__CONSTANT__ float3x3 XYZ_to_RGB_output = {
    {  3.2409699419f, -1.5373831776f, -0.4986107603f},
    { -0.9692436363f,  1.8759675015f,  0.0415550574f},
    {  0.0556300797f, -0.2039769589f,  1.0569715142f}
};

// sRGB to XYZ matrix
__CONSTANT__ float3x3 RGB_to_XYZ_output = {
    {  0.4123907993f,  0.3575843394f,  0.1804807884f},
    {  0.2126390059f,  0.7151686788f,  0.0721923154f},
    {  0.0193308187f,  0.1191947798f,  0.9505321522f}
};

// sRGB to XYZ matrix
__CONSTANT__ float3x3 RGB_to_XYZ_limit = {
    {  0.4123907993f,  0.3575843394f,  0.1804807884f},
    {  0.2126390059f,  0.7151686788f,  0.0721923154f},
    {  0.0193308187f,  0.1191947798f,  0.9505321522f}
};

__CONSTANT__ float PI = 3.141592653589793f;

__CONSTANT__ float L_A = 100.0f;

__CONSTANT__ float Y_b = 20.0f;

__CONSTANT__ float referenceLuminance = 100.0f;

// Chroma compress parameters
__CONSTANT__ float hoff = 0.835f;
__CONSTANT__ float hmul = 14.0f;
__CONSTANT__ float2 a = {-0.18f, -0.42f};
__CONSTANT__ float2 b = {0.135f, 0.13f};
__CONSTANT__ float2 c = {-0.08f, 0.0f};
__CONSTANT__ float chromaCompress = 1.0f;
__CONSTANT__ float2 chromaCompressParams = {2.1f, 0.85f};
__CONSTANT__ float3 shadowCompressParams = {0.54f, 0.13f, 0.54f};
__CONSTANT__ float sat = 1.2f;
__CONSTANT__ float shadow_boost = 1.195f;
// __CONSTANT__ float boundaryRGB = sstsLuminance.z / referenceLuminance;
__CONSTANT__ float boundaryRGB = 1.0f;

// DanieleEvoCurve (ACES2 candidate) parameters
__CONSTANT__ float mmScaleFactor = 100.0f;
__CONSTANT__ float daniele_n = 100.0f; // peak white  
__CONSTANT__ float daniele_n_r = 100.0f;    // Normalized white in nits (what 1.0 should be)
__CONSTANT__ float daniele_g = 1.15f;      // surround / contrast
__CONSTANT__ float daniele_c = 0.18f;      // scene-referred grey
__CONSTANT__ float daniele_c_d = 10.013f;    // display-referred grey (in nits)
__CONSTANT__ float daniele_w_g = 0.14f;    // grey change between different peak luminance
__CONSTANT__ float daniele_t_1 = 0.04f;     // shadow toe, flare/glare compensation - how ever you want to call it
__CONSTANT__ float daniele_r_hit_min = 128.0f;  // Scene-referred value "hitting the roof" at 100 nits
__CONSTANT__ float daniele_r_hit_max = 896.0f;  // Scene-referred value "hitting the roof" at 10,000 nits

// Gamut Compression parameters
__CONSTANT__ float cuspMidBlend = 0.8f;
__CONSTANT__ float smoothCusps = 0.0f;
__CONSTANT__ float midJ = 34.08f; // ~10 nits in Hellwig J
__CONSTANT__ float focusDistance = 2.0f;
__CONSTANT__ float4 compressionFuncParams = {0.75f, 1.2f, 1.45f, 1.0f};
// __CONSTANT__ float gamut_gamma = 1.137f; // surround.y * (1.48 + sqrt(Y_b / Y_w)))
__CONSTANT__ float gamut_gamma = 0.879464f; // reciprocal of above
__CONSTANT__ float2 gamutCuspTable[360] = {
{56.9, 69.58267212},
{56.6, 69.6852417},
{56.3, 69.78488159},
{56, 69.83520508},
{55.7, 69.88296509},
{55.5, 69.83657837},
{55.2, 69.92626953},
{54.9, 69.83016968},
{54.7, 69.78048706},
{54.4, 69.68188477},
{54.2, 69.58514404},
{53.9, 69.39401245},
{53.7, 69.2961731},
{53.4, 69.05889893},
{53.2, 68.91540527},
{53, 68.68255615},
{52.7, 68.48904419},
{52.5, 68.30062866},
{52.2, 68.06207275},
{52, 67.87353516},
{51.8, 67.64117432},
{51.5, 67.4458313},
{51.3, 67.3006897},
{51, 67.06085205},
{50.8, 66.91516113},
{50.6, 66.72613525},
{51, 65.50079346},
{51.6, 64.30627441},
{52.1, 63.21511841},
{52.6, 62.14691162},
{53, 61.15264893},
{53.5, 60.27053833},
{53.9, 59.38070679},
{54.4, 58.60180664},
{54.8, 57.82116699},
{55.3, 57.15060425},
{55.7, 56.48391724},
{56.1, 55.80697632},
{56.5, 55.21316528},
{56.9, 54.65701294},
{57.3, 54.13925171},
{57.7, 53.6131897},
{58.1, 53.17416382},
{58.5, 52.67990112},
{58.9, 52.22598267},
{59.2, 51.84448242},
{59.6, 51.47473145},
{60, 51.04980469},
{60.3, 50.70800781},
{60.7, 50.41503906},
{61, 50.07324219},
{61.4, 49.78027344},
{61.7, 49.48730469},
{62.1, 49.19433594},
{62.4, 48.95019531},
{62.7, 48.65722656},
{63.1, 48.41308594},
{63.4, 48.16894531},
{63.8, 47.97363281},
{64.1, 47.72949219},
{64.5, 47.58300781},
{64.8, 47.33886719},
{65.1, 47.14355469},
{65.5, 46.99707031},
{65.8, 46.80175781},
{66.2, 46.65527344},
{66.5, 46.45996094},
{66.9, 46.36230469},
{67.2, 46.16699219},
{67.6, 46.06933594},
{67.9, 45.87402344},
{68.3, 45.77636719},
{68.6, 45.62988281},
{69, 45.53222656},
{69.3, 45.38574219},
{69.7, 45.28808594},
{70.1, 45.23925781},
{70.5, 45.14160156},
{70.8, 45.04394531},
{71.2, 44.94628906},
{71.6, 44.89746094},
{72, 44.84863281},
{72.4, 44.79980469},
{72.8, 44.75097656},
{73.2, 44.70214844},
{73.6, 44.65332031},
{74, 44.65332031},
{74.5, 44.65332031},
{74.9, 44.65332031},
{75.4, 44.70214844},
{75.8, 44.70214844},
{76.3, 44.79980469},
{76.8, 44.89746094},
{77.3, 44.94628906},
{77.7, 45.04394531},
{78.3, 45.19042969},
{78.8, 45.33691406},
{79.3, 45.48339844},
{79.9, 45.67871094},
{80.5, 45.92285156},
{81.1, 46.16699219},
{81.7, 46.45996094},
{82.3, 46.75292969},
{83, 47.09472656},
{83.7, 47.48535156},
{84.4, 47.92480469},
{85.1, 48.36425781},
{85.9, 48.90136719},
{86.7, 49.43847656},
{87.5, 50.07324219},
{87.7, 50.41503906},
{87.3, 50.46386719},
{86.9, 50.61035156},
{86.5, 50.75683594},
{86.1, 50.95214844},
{85.7, 51.14746094},
{85.3, 51.44042969},
{84.9, 51.78222656},
{84.5, 52.12402344},
{84.1, 52.51464844},
{83.6, 52.95410156},
{83.2, 53.44238281},
{82.8, 54.02832031},
{82.4, 54.61425781},
{81.9, 55.24902344},
{81.5, 55.98144531},
{81, 56.71386719},
{80.6, 57.54394531},
{80.1, 58.42285156},
{79.7, 59.39941406},
{79.2, 60.42480469},
{78.7, 61.49902344},
{78.2, 62.62207031},
{77.7, 63.84277344},
{77.2, 65.16113281},
{76.7, 66.52832031},
{76.2, 68.04199219},
{75.7, 69.60449219},
{75.1, 71.21582031},
{74.6, 72.97363281},
{74, 74.78027344},
{73.9, 75.46386719},
{74.4, 74.82910156},
{74.9, 74.24316406},
{75.3, 73.65722656},
{75.7, 73.07128906},
{76.1, 72.58300781},
{76.5, 72.09472656},
{76.8, 71.55761719},
{77.2, 71.11816406},
{77.5, 70.67871094},
{77.8, 70.19042969},
{78.1, 69.79980469},
{78.4, 69.36035156},
{78.7, 68.96972656},
{78.9, 68.53027344},
{79.2, 68.13964844},
{79.4, 67.70019531},
{79.7, 67.35839844},
{79.9, 66.96777344},
{80.1, 66.52832031},
{80.3, 66.13769531},
{80.6, 65.79589844},
{80.8, 65.40527344},
{81, 65.01464844},
{81.2, 64.57519531},
{81.4, 64.18457031},
{81.6, 63.79394531},
{81.8, 63.35449219},
{82, 62.96386719},
{82.2, 62.57324219},
{82.4, 62.13378906},
{82.5, 61.64550781},
{82.7, 61.20605469},
{82.9, 60.76660156},
{83.1, 60.32714844},
{83.3, 59.88769531},
{83.5, 59.44824219},
{83.7, 58.95996094},
{83.8, 58.42285156},
{84, 57.98339844},
{84.2, 57.49511719},
{84.4, 57.05566406},
{84.6, 56.56738281},
{84.8, 56.07910156},
{84.9, 55.54199219},
{85.1, 55.10253906},
{85.3, 54.61425781},
{85.5, 54.12597656},
{85.7, 53.68652344},
{85.9, 53.19824219},
{86, 52.70996094},
{86.2, 52.22167969},
{86.4, 51.78222656},
{86.6, 51.29394531},
{86.8, 50.85449219},
{86.5, 50.17089844},
{85.9, 49.34082031},
{85.4, 48.55957031},
{84.9, 47.82714844},
{84.4, 47.04589844},
{83.9, 46.36230469},
{83.4, 45.62988281},
{82.9, 44.94628906},
{82.4, 44.26269531},
{81.9, 43.57910156},
{81.5, 42.99316406},
{81, 42.35839844},
{80.6, 41.82128906},
{80.1, 41.23535156},
{79.7, 40.69824219},
{79.3, 40.20996094},
{78.8, 39.67285156},
{78.3, 39.18457031},
{78, 38.74511719},
{77.6, 38.35449219},
{77.2, 37.96386719},
{76.8, 37.57324219},
{76.4, 37.23144531},
{76, 36.88964844},
{75.6, 36.59667969},
{75.1, 36.30371094},
{74.8, 36.05957031},
{74.4, 35.86425781},
{74, 35.66894531},
{73.7, 35.52246094},
{73.3, 35.37597656},
{73, 35.27832031},
{72.5, 35.18066406},
{72.2, 35.13183594},
{71.8, 35.08300781},
{71.5, 35.13183594},
{71.1, 35.13183594},
{70.7, 35.18066406},
{70.4, 35.27832031},
{70, 35.37597656},
{69.6, 35.52246094},
{69.3, 35.71777344},
{68.9, 35.86425781},
{68.5, 36.10839844},
{68.2, 36.35253906},
{67.8, 36.64550781},
{67.5, 36.93847656},
{67.1, 37.28027344},
{66.7, 37.62207031},
{66.4, 38.01269531},
{66, 38.40332031},
{65.6, 38.84277344},
{65.3, 39.33105469},
{64.9, 39.77050781},
{64.5, 40.25878906},
{64.2, 40.84472656},
{63.8, 41.38183594},
{63.4, 41.96777344},
{63, 42.55371094},
{62.6, 43.13964844},
{62.3, 43.82324219},
{61.8, 44.45800781},
{61.5, 45.19042969},
{61.1, 45.87402344},
{60.7, 46.60644531},
{60.3, 47.33886719},
{59.9, 48.10873413},
{59.4, 48.87384033},
{59.1, 49.65475464},
{58.6, 50.49224854},
{58.2, 51.33306885},
{57.8, 52.16265869},
{57.3, 53.05410767},
{56.9, 53.95297241},
{56.4, 54.8145752},
{56, 55.7800293},
{55.5, 56.65725708},
{55.1, 57.59469604},
{54.6, 58.57720947},
{54.1, 59.54141235},
{53.6, 60.48730469},
{53.2, 61.49890137},
{52.7, 62.49874878},
{52.2, 63.52313232},
{51.7, 64.52737427},
{51.1, 65.5930481},
{50.6, 66.68304443},
{50.1, 67.75106812},
{49.5, 68.82553101},
{49.3, 69.47341919},
{49.6, 69.60424805},
{49.8, 69.76165771},
{50.1, 69.80477905},
{50.3, 69.96102905},
{50.6, 70.0010376},
{50.8, 70.11291504},
{51.1, 70.14962769},
{51.3, 70.25991821},
{51.6, 70.29333496},
{51.8, 70.31439209},
{52.1, 70.43215942},
{52.4, 70.41589355},
{52.6, 70.4331665},
{52.9, 70.45724487},
{53.2, 70.52380371},
{53.5, 70.54367065},
{53.8, 70.51629639},
{54.1, 70.53158569},
{54.4, 70.54467773},
{54.7, 70.55557251},
{55, 70.56427002},
{55.3, 70.57077026},
{55.6, 70.52893066},
{56, 70.53100586},
{56.3, 70.5765686},
{56.7, 70.572052},
{57, 70.61309814},
{57.4, 70.64923096},
{57.7, 70.63851929},
{58.1, 70.71615601},
{58.5, 70.79086304},
{58.9, 70.86264038},
{59.3, 70.93148804},
{59.8, 71.08648682},
{60.2, 71.21582031},
{60.7, 71.31347656},
{61.1, 71.50878906},
{61.6, 71.70410156},
{62.1, 71.89941406},
{62.6, 72.14355469},
{63.2, 72.38769531},
{63.7, 72.68066406},
{64.3, 73.02246094},
{64.9, 73.36425781},
{65.5, 73.80371094},
{66.1, 74.19433594},
{66.8, 74.73144531},
{67.5, 75.26855469},
{68.2, 75.80566406},
{68.6, 76.09863281},
{68, 75.41503906},
{67.3, 74.73144531},
{66.7, 74.14550781},
{66.1, 73.60839844},
{65.6, 73.07128906},
{65, 72.58300781},
{64.5, 72.14355469},
{63.9, 71.70410156},
{63.4, 71.36230469},
{62.9, 70.97167969},
{62.4, 70.67871094},
{61.9, 70.33691406},
{61.5, 70.19042969},
{61, 69.89746094},
{60.6, 69.75097656},
{60.2, 69.60449219},
{59.8, 69.43048096},
{59.3, 69.33425903},
{59, 69.31304932},
{58.6, 69.2979126},
{58.2, 69.27935791},
{57.9, 69.34640503},
{57.5, 69.3687439},
{57.2, 69.47717285}
};

__CONSTANT__ float3 surround = {0.9, 0.59, 0.9};

__CONSTANT__ float3 d65White = {95.05f, 100.0f, 108.88f};

// multiplies a 3D vector with a 3x3 matrix
__DEVICE__ float3 vector_dot( float3x3 m, float3 v)
{
    float3 r;

    r.x = m.x.x * v.x + m.x.y * v.y + m.x.z * v.z;
    r.y = m.y.x * v.x + m.y.y * v.y + m.y.z * v.z;
    r.z = m.z.x * v.x + m.z.y * v.y + m.z.z * v.z;
    
    return r;
}

// "safe" power function to avoid NANs or INFs when taking a fractional power of a negative base
// this one initially returned -pow(abs(b), e) for negative b
// but this ended up producing undesirable results in some cases
// so now it just returns 0.0 instead
__DEVICE__ float spow( float base, float exponent )
{
    if(base < 0.0f && exponent != _floorf(exponent) )
    {
         return 0.0f;
    }
    else
    {
        return _powf(base, exponent); 
    }
}

__DEVICE__ float3 float3spow( float3 base, float exponent )
{
    return make_float3(spow(base.x, exponent), spow(base.y, exponent), spow(base.z, exponent));
}

__DEVICE__ float3 float3sign( float3 v )
{
    return make_float3(_copysignf(1.0f, v.x), _copysignf(1.0f, v.y), _copysignf(1.0f, v.z));
}

__DEVICE__ float3 float3abs( float3 a )
{
    return make_float3(_fabs(a.x), _fabs(a.y), _fabs(a.z));
}

// "safe" div
__DEVICE__ float sdiv( float a, float b )
{
    if(b == 0.0f)
    {
        return 0.0f;
    }
    else
    {
        return a / b;
    }
}

// convert radians to degrees
__DEVICE__ float degrees( float radians )
{
    return radians * 180.0f / PI;
}


// convert degrees to radians
__DEVICE__ float radians( float degrees )
{
    return degrees / 180.0f * PI;
}

__DEVICE__ float mod(float a, float N)
{
    return a - N * _floorf(a / N);
}

__DEVICE__ float3 compress(float3 xyz)
{
    float x = xyz.x;
    float y = xyz.y;
    float z = xyz.z;
   
    float C = (x + y + z) / 3.0f;
    if (C == 0.0f)
        return xyz;

    float R = _sqrtf(_powf((x-C), 2.0f) + _powf((y-C), 2.0f) + _powf((z-C), 2.0f));
    R = R * 0.816496580927726f; // np.sqrt(2/3)
    
    if (R != 0.0f)
    {
      x = (x - C) / R;
      y = (y - C) / R;
      z = (z - C) / R;
    }
      
    float r = R / C;
    float s = -_fminf(x, _fminf(y, z));
    
    float t = 0.0f;
    if (r != 0.0f)
    {
      t = (0.5f + spow((_powf((s - 0.5f), 2.0f) + _powf((_sqrtf(4.0f / _powf(r, 2.0f) + 1.0f) - 1.0f), 2.0f) / 4.0f), 0.5f));
      if (t == 0.0f)
        return make_float3(xyz.x, xyz.y, xyz.z);
      t = 1.0f / t;
    }

    x = C * x * t + C;
    y = C * y * t + C;
    z = C * z * t + C;

    return make_float3(x, y, z);
}

__DEVICE__ float3 uncompress(float3 xyz)
{
    float x = xyz.x;
    float y = xyz.y;
    float z = xyz.z;

    float C = (x+y+z)*(1.0f / 3.0f) ;
    if (C == 0.0f)
         return xyz;

    float R = _sqrtf(_powf((x-C), 2.0f) + _powf((y-C), 2.0f) + _powf((z-C), 2.0f));
    R = R * 0.816496580927726; // np.sqrt(2/3)
    
    if (R != 0.0f)
    {
        x = (x - C) / R;
        y = (y - C) / R;
        z = (z - C) / R;
    }

    float t = R / C;
    float s = -_fminf(x, _fminf(y, z));
    
    float r = 0.0f;
    if (t != 0.0f)
    {
         r = _sqrtf(_powf((2.0f * _sqrtf(_powf((1.0f / t - 0.5f),2.0f) - _powf((s - 0.5f), 2.0f)) + 1.0f), 2.0f) - 1.0f);
         if (r == 0.0f)
            return make_float3(xyz.x, xyz.y, xyz.z);
         r = 2.0f / r;
    }

    x = C * x * r + C;
    y = C * y * r + C;
    z = C * z * r + C;
    
    return make_float3(x, y, z);
}

// "PowerP" compression function (also used in the ACES Reference Gamut Compression)
// values of v above  'threshold' are compressed by a 'power' function
// so that an input value of 'limit' results in an output of 1.0
__DEVICE__ float compressPowerP( float v, float threshold, float limit, float power, int inverse )
{
    float s = (limit-threshold)/_powf(_powf((1.0f-threshold)/(limit-threshold),-power)-1.0f,1.0f/power);

    float vCompressed;

    if( inverse )
    {
        vCompressed = (v<threshold||limit<1.0001f||v>threshold+s)?v:threshold+s*_powf(-(_powf((v-threshold)/s,power)/(_powf((v-threshold)/s,power)-1.0f)),1.0f/power);
    }
    else
    {
        vCompressed = (v<threshold||limit<1.0001f)?v:threshold+s*((v-threshold)/s)/(_powf(1.0f+_powf((v-threshold)/s,power),1.0f/power));
    }

    return vCompressed;
}

__DEVICE__ float3 post_adaptation_non_linear_response_compression_forward(float3 RGB, float F_L)
{
    float3 F_L_RGB = float3spow(F_L * float3abs(RGB) / 100.0f, 0.42f);
    float3 RGB_c;
    RGB_c.x = (400.0f * _copysignf(1.0f, RGB.x) * F_L_RGB.x) / (27.13f + F_L_RGB.x) + 0.1f;
    RGB_c.y = (400.0f * _copysignf(1.0f, RGB.y) * F_L_RGB.y) / (27.13f + F_L_RGB.y) + 0.1f;
    RGB_c.z = (400.0f * _copysignf(1.0f, RGB.z) * F_L_RGB.z) / (27.13f + F_L_RGB.z) + 0.1f;

    return RGB_c;
}

__DEVICE__ float3 post_adaptation_non_linear_response_compression_inverse(float3 RGB,float F_L)
{
    float3 RGB_p =  (float3sign(RGB - 0.1f) * 100.0f / F_L * float3spow((27.13f * float3abs(RGB - 0.1f)) / (400.0f - float3abs(RGB - 0.1f)), 1.0f / 0.42f) );

    return RGB_p;
}

__DEVICE__ float3 XYZ_to_Hellwig2022_JMh( float3 XYZ, float3 XYZ_w)
{
//     float _X_w = XYZ_w.x ;
    float Y_w = XYZ_w.y ;
//     float _Z_w = XYZ_w.z ;

    // # Step 0
    // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.
    float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);

    // Ignore degree of adaptation.
    float D = 1.0f;

    // # Viewing conditions dependent parameters
    float k = 1.0f / (5.0f * L_A + 1.0f);
    float k4 = _powf(k,4);
    float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * _powf((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;
    float n = sdiv(Y_b, Y_w);
    float z = 1.48f + _sqrtf(n);

    // // float D_RGB = ( D[..., np.newaxis] * Y_w[..., np.newaxis] / RGB_w + 1 - D[..., np.newaxis] )
    float3 D_RGB = D * Y_w / RGB_w + 1.0f - D;
    float3 RGB_wc = D_RGB * RGB_w;

    // # Applying forward post-adaptation non-linear response compression.
    float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);

    // # Computing achromatic responses for the whitepoint.
    float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;

    // # Computing achromatic responses for the whitepoint.
    float R_aw = RGB_aw.x ;
    float G_aw = RGB_aw.y ;
    float B_aw = RGB_aw.z ;
    float A_w = 2 * R_aw + G_aw + 0.05f * B_aw - 0.305f;

    // # Step 1
    // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.

    float3 RGB = vector_dot(MATRIX_16, XYZ);

    // # Step 2
    float3 RGB_c = D_RGB * RGB;

    // # Step 3
    // Always compressMode
    RGB_c = compress(RGB_c);

    float3 RGB_a = post_adaptation_non_linear_response_compression_forward(RGB_c, F_L);

    RGB_a = uncompress(RGB_a);

    // # Step 4
    // # Converting to preliminary cartesian coordinates.
    float R_a = RGB_a.x ;
    float G_a = RGB_a.y ;
    float B_a = RGB_a.z ;
    float a = R_a - 12.0f * G_a / 11.0f + B_a / 11.0f;
    float b = (R_a + G_a - 2.0f * B_a) / 9.0f;

    // # Computing the *hue* angle :math:`h`.
    // Unclear why this isnt matching the python version.
    float h = mod(degrees(_atan2f(b, a)), 360.0f);

    // # Step 6
    // # Computing achromatic responses for the stimulus.
    float R_a2 = RGB_a.x ;
    float G_a2 = RGB_a.y ;
    float B_a2 = RGB_a.z ;
    // A = 2 * R_a + G_a + 0.05 * B_a - 0.305
    float A = 2 * R_a2 + G_a2 + 0.05f * B_a2 - 0.305f;

    // # Step 7
    // # Computing the correlate of *Lightness* :math:`J`.
    // with sdiv_mode():
    float J = 100.0f * spow(sdiv(A, A_w), surround.y * z);

    // # Step 8
    // # Computing the correlate of *brightness* :math:`Q`.
    // with sdiv_mode():
//     float Q = (2.0f / float(surround.y)) * (J / 100.0f) * A_w;

    // # Step 9
    // # Computing the correlate of *colourfulness* :math:`M`.
    float M = 43.0f * surround.z * _sqrtf(a * a + b * b);

    // # Computing the correlate of *chroma* :math:`C`.
    // with sdiv_mode():
//     float C = 35.0f * sdiv(M, A_w);

    // Np *Helmholtz–Kohlrausch* Effect Extension.


    if (J == 0.0f)
    {
        M = 0.0f;
    }
      return make_float3(J, M, h);
}

__DEVICE__ float3 Hellwig2022_JMh_to_XYZ( float3 JMh, float3 XYZ_w)
{
    float J = JMh.x;
    float M = JMh.y;
    float h = JMh.z;

//         float _X_w = XYZ_w.x;
    float Y_w = XYZ_w.y;
//         float _Z_w = XYZ_w.z;

    // # Step 0
    // # Converting *CIE XYZ* tristimulus values to sharpened *RGB* values.
    float3 RGB_w = vector_dot(MATRIX_16, XYZ_w);

    // Ignore degree of adaptation.
    float D = 1.0f;

    // # Viewing conditions dependent parameters
    float k = 1.0f / (5.0f * L_A + 1.0f);
    float k4 = _powf(k, 4.0f);
    float F_L = 0.2f * k4 * (5.0f * L_A) + 0.1f * _powf((1.0f - k4), 2.0f) * spow(5.0f * L_A, 1.0f / 3.0f) ;
    float n = sdiv(Y_b, Y_w);
    float z = 1.48f + _sqrtf(n);

    // // float D_RGB = ( D[..., np.newaxis] * Y_w[..., np.newaxis] / RGB_w + 1 - D[..., np.newaxis] )
    float3 D_RGB = D * Y_w / RGB_w + 1.0f - D;
    float3 RGB_wc = D_RGB * RGB_w;

    // # Applying forward post-adaptation non-linear response compression.
    float3 F_L_RGB = float3spow(F_L * float3abs(RGB_wc) / 100.0f, 0.42f);

    // # Computing achromatic responses for the whitepoint.
    float3 RGB_aw = (400.0f * float3sign(RGB_wc) * F_L_RGB) / (27.13f + F_L_RGB) + 0.1f;

    // # Computing achromatic responses for the whitepoint.
    float R_aw = RGB_aw.x ;
    float G_aw = RGB_aw.y ;
    float B_aw = RGB_aw.z ;
    float A_w = 2.0f * R_aw + G_aw + 0.05f * B_aw - 0.305f;

    float hr = radians(h);

    // No *Helmholtz–Kohlrausch* Effect.

    // # Computing achromatic response :math:`A` for the stimulus.
    float A = A_w * spow(J / 100.0f, 1.0f / (surround.y * z));

    // # Computing *P_p_1* to *P_p_2*.
    float P_p_1 = 43.0f * surround.z;
    float P_p_2 = A;


    // # Step 3
    // # Computing opponent colour dimensions :math:`a` and :math:`b`.
    // with sdiv_mode():
    float gamma = M / P_p_1;

    float a = gamma * _cosf(hr);
    float b = gamma * _sinf(hr);


    // # Step 4
    // # Applying post-adaptation non-linear response compression matrix.

    float3 RGB_a = vector_dot(panlrcm, make_float3(P_p_2, a, b)) / 1403.0f;

    // # Step 5
    // # Applying inverse post-adaptation non-linear response compression.

    // Always compressMode
    RGB_a = compress(RGB_a);

    float3 RGB_c = post_adaptation_non_linear_response_compression_inverse(RGB_a + 0.1, F_L);

    RGB_c = uncompress(RGB_c);

    // # Step 6
    float3 RGB = RGB_c / D_RGB;
    

    // # Step 7
    float3 XYZ = vector_dot(MATRIX_INVERSE_16, RGB);

    return XYZ;
}

// convert JMh correlates to  RGB values in the output colorspace
__DEVICE__ float3 JMh_to_luminance_RGB(float3 JMh)
{
    float3 luminanceXYZ = Hellwig2022_JMh_to_XYZ( JMh, d65White);
    float3 luminanceRGB = vector_dot(XYZ_to_RGB_output, luminanceXYZ);

    return luminanceRGB;
}

// convert RGB values in the output colorspace to the ZCAM J (lightness), M (colorfulness) and h (hue) correlates
__DEVICE__ float3 luminance_RGB_to_JMh(float3 luminanceRGB)
{
    float3 XYZ = vector_dot(RGB_to_XYZ_output, luminanceRGB);
    float3 JMh = XYZ_to_Hellwig2022_JMh(XYZ, d65White);
    return JMh;
}

__DEVICE__ float daniele_evo_fwd(float Y)
{
    const float daniele_r_hit = daniele_r_hit_min + (daniele_r_hit_max - daniele_r_hit_min) * (_logf(daniele_n / daniele_n_r) / _logf(10000.0f / 100.0f));
    const float daniele_m_0 = daniele_n / daniele_n_r;
    const float daniele_m_1 = 0.5f * (daniele_m_0 + _sqrtf(daniele_m_0 * (daniele_m_0 + 4.0f * daniele_t_1)));
    const float daniele_u = _powf((daniele_r_hit / daniele_m_1) / ((daniele_r_hit / daniele_m_1) + 1.0f), daniele_g);
    const float daniele_m = daniele_m_1 / daniele_u;
    const float daniele_w_i = _logf(daniele_n / 100.0f) / _logf(2.0f);
    const float daniele_c_t = daniele_c_d * (1.0f + daniele_w_i * daniele_w_g) / daniele_n_r;
    const float daniele_g_ip = 0.5f * (daniele_c_t + _sqrtf(daniele_c_t * (daniele_c_t + 4.0f * daniele_t_1)));
    const float daniele_g_ipp2 = -daniele_m_1 * _powf(daniele_g_ip / daniele_m, 1.0f / daniele_g) / (_powf(daniele_g_ip / daniele_m, 1.0f / daniele_g) - 1.0f);
    const float daniele_w_2 = daniele_c / daniele_g_ipp2;
    const float daniele_s_2 = daniele_w_2 * daniele_m_1;
    const float daniele_u_2 = _powf((daniele_r_hit / daniele_m_1) / ((daniele_r_hit / daniele_m_1) + daniele_w_2), daniele_g);
    const float daniele_m_2 = daniele_m_1 / daniele_u_2;

    float f = daniele_m_2 * _powf(_fmaxf(0.0f, Y) / (Y + daniele_s_2), daniele_g);
    float h = _fmaxf(0.0f, f * f / (f + daniele_t_1));

    return h;
}

__DEVICE__ float ptanh(float x, float p, float t, float pt)
{
    return _powf(_tanhf(_powf(x, p) / t), 1.0f / pt);
}

// convert linear RGB values with the limiting primaries to ZCAM J (lightness), M (colorfulness) and h (hue) correlates
__DEVICE__ float3 limit_RGB_to_JMh(float3 RGB)
{
    float3 luminanceRGB = RGB * boundaryRGB *referenceLuminance;
    float3 XYZ = vector_dot(RGB_to_XYZ_limit, luminanceRGB);
    float3 JMh = XYZ_to_Hellwig2022_JMh(XYZ, d65White);
    return JMh;
}

// Scaled power(p)
__DEVICE__ float spowerp(float x, float l, float p)
{
    x = x / l;
    x = x != 0.0f ? x / _powf(1.0f + spow(x, p), 1.0f / p) : 0.0f;
    return x * l;
}

__DEVICE__ float desat_curve(float x)
  {
    float m = daniele_n / daniele_n_r;
    float w = 1.18f * m;
    return (_fmaxf(0.0f, x) / (x + w)) * m;
  }

  // Hue-dependent curve used in chroma compression
  // https://www.desmos.com/calculator/lmbbu8so4c
__DEVICE__ float compr_hue_depend(float h)
{
    float hr = radians(h);
    float hr2 = hr * 2.0f;
    float hr3 = hr * 3.0f;

    return (a.x * _cosf(hr) +
            b.x * _cosf(hr2) +
            c.x * _cosf(hr3) +
            a.y * _sinf(hr) +
            b.y * _sinf(hr2) +
            c.y * _sinf(hr3) +
            hoff) * hmul;
}

  // Chroma compression
  //
  // - Compresses the scene colorfulness with desat_curve() and spowerp() for
  //   path-to-white and path-to-black.
  // - Scales the colorfulness with a cubic curve to affect the rate of change of
  //   desaturation as lightness is increased.  This is hue dependent and affects
  //   a range of colorfulness (distance from the achromatic).
  //
__DEVICE__ float chromaCompression(float3 JMh, float luminance, int invert)
{
    float M = JMh.y;
    
    // limitJmax (asumed to match limitRGB white)
    float limitJmax = limit_RGB_to_JMh(make_float3(1.0f, 1.0f, 1.0f)).x;

    // Model specific factors to avoid having to change parameters manually
    int camMode = 1;
    float model_desat_factor = camMode == 1 ? chromaCompress * 1.22f : chromaCompress * 0.8f;
    float model_factor = camMode == 1 ? 5.0f : 1.0f;

    // Path-to-white
    //
    // Compression curve based on the difference of the scene luminance and desat_curve().
    // This scales automatically, compressing less with higher peak luminance.  Higher peak
    // luminance has a slower rate of change for colorfulness so it needs less compression.
    // The end variable can be used to affect how close to white point the curve ends, and
    // prevents the curve ever going negative.
    // https://www.desmos.com/calculator/ovy5wzr7lm
    //
    float end = 0.12f;
    float x = _log10f(luminance) - _log10f(desat_curve(luminance));
    model_desat_factor += _logf(daniele_n / daniele_n_r) * 0.08f;
    float desatcurve = spowerp(x * model_desat_factor, chromaCompressParams.x, chromaCompressParams.y);
    desatcurve = desatcurve < (1.0f - end) ? desatcurve : (1.0f - end) + end * _tanhf((desatcurve - (1.0f - end)) / end);

    // Path-to-black
    //
    // Shadow compression to reduce clipping and colorfulness of noise.
    // https://www.desmos.com/calculator/ovy5wzr7lm
    //
    float shadowcurve = ptanh(luminance, shadowCompressParams.x, shadowCompressParams.y, shadowCompressParams.z);

    // In-gamut compression
    //
    // Hue-dependent compression of M with R (J) from achromatic outward.  The purpose is to make sure
    // the interior of the gamut is smooth and even.  Larger values of R will compress larger range of
    // colorfulness.  The c variable controls compression with R (1.0 no compression, 0.0001 full
    // compression).  The driver is the tonescaled lightness in 0-1 range.  The shadow_boost affects
    // saturation mainly at and under normal exposure.
    // https://www.desmos.com/calculator/nygtri388c
    //
    float R = (JMh.x + 0.01f) * model_factor * compr_hue_depend(JMh.z);
    float c = _fmaxf(1.0f - (JMh.x / limitJmax), 0.0001f) * shadow_boost;

    desatcurve = (1.0f - desatcurve) * shadowcurve;

    if (!invert)
    {
      M *= desatcurve;
      if (M != 0.0f && R != 0.0f)
      {
        M *= ((M * M + R * c) / (M * M + R));
      }
      M *= sat;
    }
    else
    {
      M /= sat;
      if (M != 0.0f && R != 0.0f)
      {
        float t0 = 3.0f * R * c;
        float p0 = M * M - t0;
        float p1 = 2.0f * M * M + 27.0f * R - 3.0f * t0;
        float p2 = spow((_sqrtf(M * M * p1 * p1 - 4.0f * p0 * p0 * p0) / 2.0f) + M * p1 / 2.0f, 1.0f / 3.0f);
        M = (p0 / (3.0f * p2) + (p2 / 3.0f) + (M / 3.0f));
      }
      M /= desatcurve;
    }

    return M;
}

__DEVICE__ float3 forwardTonescale( float3 inputJMh, int compressChroma)
{
    float3 outputJMh;
    float3 monoJMh = make_float3(inputJMh.x,0.0f,0.0f);
    float3 linearJMh = JMh_to_luminance_RGB(monoJMh);
    float linear = linearJMh.x / referenceLuminance;

    // only Daniele Evo tone scale
    float luminanceTS = daniele_evo_fwd(linear) * mmScaleFactor;

    float3 tonemappedmonoJMh = luminance_RGB_to_JMh(make_float3(luminanceTS,luminanceTS,luminanceTS));
    float3 tonemappedJMh = make_float3(tonemappedmonoJMh.x, inputJMh.y, inputJMh.z);

    outputJMh = tonemappedJMh;

    // Chroma Compression)
    if (compressChroma)
    {
        outputJMh.y = chromaCompression(outputJMh, linear, 0);
    }

    return outputJMh;
}

__DEVICE__ float2 cuspFromTable(float h)
{
    int lo = (int)_floorf(mod(h, 360.0f));
    int hi = (int)_ceilf(mod(h, 360.0f));
    if (hi == 360)
    {
        hi = 0;
    }
    float t = _fmod(h, 1.0f);
    
    return _mix(gamutCuspTable[lo], gamutCuspTable[hi], t);
}

// Smooth minimum of a and b
__DEVICE__ float smin(float a, float b, float s)
{
    float h = _fmaxf(s - _fabs(a - b), 0.0f) / s;
    return _fminf(a, b) - h * h * h * s * (1.0f / 6.0f);
}

// Approximation of the gamut intersection to a curved and smoothened triangle
// along the projection line 'from -> to'. 
__DEVICE__ float2 find_gamut_intersection(float2 cusp, float2 from, float2 to, float smoothing)
{
    // limitJmax (asumed to match limitRGB white)
    float limitJmax = limit_RGB_to_JMh(make_float3(1.0f, 1.0f, 1.0f)).x;

    float t0, t1;

    // Scale the cusp outward when smoothing to avoid reducing the gamut.  Reduce
    // smoothing for high cusps because smin() will bias it too much for the longer line.
    float s = _fmaxf(_mix(smoothing, smoothing * 0.01f, cusp.x / limitJmax), 0.0001f);
    cusp.y += 15.0f * s;
    cusp.x += 5.0f * s;

    // Line below the cusp is curved with gamut_gamma
    float toJ_gamma = cusp.x * spow(to.x / cusp.x, gamut_gamma);
    float fromJ_gamma = cusp.x * spow(from.x / cusp.x, gamut_gamma);
    t0 = cusp.y * toJ_gamma / (from.y * cusp.x + cusp.y * (toJ_gamma - fromJ_gamma));

    // Line above the cusp
    t1 = cusp.y * (to.x - limitJmax) / (from.y * (cusp.x - limitJmax) + cusp.y * (to.x - from.x));

    // Smooth minimum to smooth the cusp
    t1 = smin(_fabs(t0), _fabs(t1), s);

    return make_float2(to.x * (1.0f - t1) + t1 * from.x, t1 * from.y);
}

__DEVICE__ float3 compressGamut(float3 JMh, int invert)
{
    // limitJmax (asumed to match limitRGB white)
    float limitJmax = limit_RGB_to_JMh(make_float3(1.0f, 1.0f, 1.0f)).x;

    float2 project_from = make_float2(JMh.x, JMh.y);
    float2 JMcusp = cuspFromTable(JMh.z);

    if (project_from.y == 0.0f)
      return JMh;

    // Calculate where the out of gamut color is projected to
    float focusJ = _mix(JMcusp.x, midJ, cuspMidBlend);

    // https://www.desmos.com/calculator/9u0wiiz9ys
    float Mratio = project_from.y / (focusDistance * JMcusp.y);
    float a = _fmaxf(0.001f, Mratio / focusJ);
    float b0 = 1.0f - Mratio;
    float b1 = -(1.0f + Mratio + (a * limitJmax));
    float b = project_from.x < focusJ ? b0 : b1;
    float c0 = -project_from.x;
    float c1 = project_from.x + limitJmax * Mratio;
    float c = project_from.x < focusJ ? c0 : c1;

    float J0 = _sqrtf(b * b - 4 * a * c);
    float J1 = (-b - J0) / (2 * a);
          J0 = (-b + J0) / (2 * a);
    float projectJ = project_from.x < focusJ ? J0 : J1;

    // Find gamut intersection
    float2 project_to = make_float2(projectJ, 0.0f);
    float2 JMboundary = find_gamut_intersection(JMcusp, project_from, project_to, smoothCusps);

    // Compress the out of gamut color along the projection line
    float v = project_from.y / JMboundary.y;
    v = compressPowerP(v, compressionFuncParams.x, _mix(compressionFuncParams.z, compressionFuncParams.y, projectJ / limitJmax), compressionFuncParams.w, invert);
    float2 JMcompressed = project_to + v * (JMboundary - project_to);

    return make_float3(JMcompressed.x, JMcompressed.y, JMh.z);
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 in = make_float3(p_R, p_G, p_B);

    float3 out = vector_dot(AP0_ACES_to_XYZ_matrix, in);
    out *= referenceLuminance;
    float3 inWhite = vector_dot(AP0_ACES_to_XYZ_matrix, make_float3(100.0f, 100.0f, 100.0f));
    out = XYZ_to_Hellwig2022_JMh(out, inWhite);
    if (toneCurve)
    {
        out = forwardTonescale(out, compressChroma);
    }
    if (gamutCompress)
    {
        out = compressGamut(out, 0);
    }
    if (JMhOut)
    {
        out.x /= referenceLuminance;
        out.y /= referenceLuminance;
        out.z /= 360.0f;
    }
    else
    {
        out = Hellwig2022_JMh_to_XYZ(out , d65White) / referenceLuminance;
        out = vector_dot(XYZ_to_RGB_output, out);
        out = float3spow(out, 1.0f / 2.4f);
    }

    return out ;
}