DEFINE_UI_PARAMS(toneCurve, Tone Curve, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(compressChroma, Compress Chroma, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(gamutCompress, Gamut Compress, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(invert, Invert, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(JMhOut, Diagnostic JMh Output, DCTLUI_CHECK_BOX, 0)

typedef struct
{
    float3 x;
    float3 y;
    float3 z;
} float3x3;

__CONSTANT__ float3x3 XYZ_to_RGB_output = {
// XYZ to sRGB matrix
    {  3.2409699419f, -1.5373831776f, -0.4986107603f},
    { -0.9692436363f,  1.8759675015f,  0.0415550574f},
    {  0.0556300797f, -0.2039769589f,  1.0569715142f}
};

__CONSTANT__ float3x3 RGB_to_XYZ_output = {
// sRGB to XYZ matrix
    {  0.4123907993f,  0.3575843394f,  0.1804807884f},
    {  0.2126390059f,  0.7151686788f,  0.0721923154f},
    {  0.0193308187f,  0.1191947798f,  0.9505321522f}
};

__CONSTANT__ float3x3 RGB_to_XYZ_limit = {
// sRGB to XYZ matrix
    {  0.4123907993f,  0.3575843394f,  0.1804807884f},
    {  0.2126390059f,  0.7151686788f,  0.0721923154f},
    {  0.0193308187f,  0.1191947798f,  0.9505321522f}
};

__CONSTANT__ float3 shadowCompressParams = {0.54f, 0.13f, 0.545f}; // 0.13 = max(0.121, 0.132 - 0.00002 * parent.ssts_luminance.z)
__CONSTANT__ float sat = 1.2f;
__CONSTANT__ float shadow_boost = 1.195f; // max(1.08, 1.21 - 0.00015 * parent.ssts_luminance.z)

__CONSTANT__ float limitJmax = 100.0f;

__CONSTANT__ float daniele_n = 100.0f; // peak white  

// cusp values calculated using Python in https://github.com/nick-shaw/aces-ot-vwg-experiments/blob/da8d7d0ad632ea9b96ec9504795e3260690b4d48/python/cusp_path.py
// (resulting values saved in ./data/J_cusp_BT709.txt and ./data/M_cusp_BT709.txt)
__CONSTANT__ float2 gamutCuspTable[360] = {
{56.9, 85.86947632},
{56.6, 86.09552002},
{56.3, 86.27059937},
{56, 86.34887695},
{55.7, 86.42385864},
{55.4, 86.40350342},
{55.2, 86.40380859},
{54.9, 86.24197388},
{54.7, 86.10287476},
{54.4, 85.80249023},
{54.2, 85.57183838},
{53.9, 85.18075562},
{53.7, 84.86026001},
{53.4, 84.38043213},
{53.2, 83.97180176},
{53, 83.47503662},
{52.7, 82.99887085},
{52.5, 82.54928589},
{52.2, 81.98736572},
{52, 81.49658203},
{51.8, 80.96343994},
{51.5, 80.45059204},
{51.3, 79.92092896},
{51, 79.36798096},
{50.8, 78.92834473},
{50.6, 78.36065674},
{51.1, 76.6156311},
{51.6, 74.92565918},
{52.1, 73.33657837},
{52.6, 71.80682373},
{53, 70.42022705},
{53.5, 69.10812378},
{54, 67.81677246},
{54.4, 66.68481445},
{54.8, 65.49108887},
{55.3, 64.4581604},
{55.7, 63.50686646},
{56.1, 62.54190063},
{56.5, 61.60995483},
{56.9, 60.75869751},
{57.3, 59.94241333},
{57.7, 59.20925903},
{58.1, 58.51303101},
{58.5, 57.75863647},
{58.8, 57.11364746},
{59.2, 56.53344727},
{59.6, 55.94445801},
{60, 55.34667969},
{60.3, 54.85839844},
{60.7, 54.37011719},
{61, 53.88183594},
{61.4, 53.44238281},
{61.7, 53.00292969},
{62.1, 52.66113281},
{62.4, 52.27050781},
{62.8, 51.92871094},
{63.1, 51.58691406},
{63.4, 51.29394531},
{63.8, 51.04980469},
{64.1, 50.75683594},
{64.5, 50.51269531},
{64.8, 50.31738281},
{65.1, 50.07324219},
{65.5, 49.92675781},
{65.8, 49.73144531},
{66.2, 49.63378906},
{66.5, 49.43847656},
{66.9, 49.38964844},
{67.2, 49.24316406},
{67.6, 49.19433594},
{67.9, 49.09667969},
{68.3, 49.09667969},
{68.6, 49.04785156},
{69, 49.04785156},
{69.4, 49.04785156},
{69.7, 49.04785156},
{70.1, 49.09667969},
{70.4, 49.14550781},
{70.8, 49.19433594},
{71.2, 49.29199219},
{71.6, 49.43847656},
{72, 49.53613281},
{72.4, 49.68261719},
{72.8, 49.82910156},
{73.2, 50.02441406},
{73.6, 50.21972656},
{74, 50.41503906},
{74.5, 50.70800781},
{74.9, 50.90332031},
{75.4, 51.19628906},
{75.8, 51.48925781},
{76.3, 51.83105469},
{76.8, 52.17285156},
{77.3, 52.51464844},
{77.8, 52.90527344},
{78.3, 53.34472656},
{78.8, 53.73535156},
{79.4, 54.22363281},
{79.9, 54.71191406},
{80.5, 55.24902344},
{81.1, 55.83496094},
{81.7, 56.37207031},
{82.3, 57.00683594},
{83, 57.69042969},
{83.7, 58.37402344},
{84.4, 59.10644531},
{85.1, 59.88769531},
{85.9, 60.71777344},
{86.7, 61.59667969},
{87.5, 62.47558594},
{87.7, 63.06152344},
{87.3, 63.25683594},
{86.9, 63.50097656},
{86.5, 63.74511719},
{86.1, 64.03808594},
{85.7, 64.33105469},
{85.3, 64.67285156},
{84.9, 65.01464844},
{84.5, 65.40527344},
{84, 65.74707031},
{83.6, 66.18652344},
{83.2, 66.62597656},
{82.8, 67.11425781},
{82.4, 67.65136719},
{81.9, 68.13964844},
{81.5, 68.72558594},
{81, 69.31152344},
{80.6, 69.99511719},
{80.1, 70.62988281},
{79.7, 71.36230469},
{79.2, 72.09472656},
{78.7, 72.87597656},
{78.2, 73.65722656},
{77.7, 74.53613281},
{77.2, 75.46386719},
{76.7, 76.44042969},
{76.2, 77.46582031},
{75.7, 78.54003906},
{75.1, 79.61425781},
{74.6, 80.88378906},
{74, 82.10449219},
{73.9, 82.00683594},
{74.4, 80.54199219},
{74.9, 79.12597656},
{75.3, 77.70996094},
{75.7, 76.34277344},
{76.1, 75.07324219},
{76.5, 73.80371094},
{76.8, 72.53417969},
{77.2, 71.41113281},
{77.5, 70.23925781},
{77.8, 69.11621094},
{78.1, 68.04199219},
{78.4, 66.96777344},
{78.7, 65.94238281},
{78.9, 64.96582031},
{79.2, 64.03808594},
{79.4, 63.06152344},
{79.7, 62.18261719},
{79.9, 61.30371094},
{80.1, 60.47363281},
{80.3, 59.64355469},
{80.6, 58.91113281},
{80.8, 58.12988281},
{81, 57.39746094},
{81.2, 56.66503906},
{81.4, 55.98144531},
{81.6, 55.29785156},
{81.8, 54.66308594},
{82, 54.07714844},
{82.2, 53.49121094},
{82.4, 52.90527344},
{82.6, 52.31933594},
{82.7, 51.73339844},
{82.9, 51.24511719},
{83.1, 50.75683594},
{83.3, 50.26855469},
{83.5, 49.78027344},
{83.7, 49.34082031},
{83.8, 48.90136719},
{84, 48.46191406},
{84.2, 48.07128906},
{84.4, 47.72949219},
{84.6, 47.33886719},
{84.7, 46.99707031},
{84.9, 46.65527344},
{85.1, 46.36230469},
{85.3, 46.06933594},
{85.5, 45.82519531},
{85.7, 45.58105469},
{85.9, 45.33691406},
{86, 45.04394531},
{86.2, 44.84863281},
{86.4, 44.65332031},
{86.6, 44.50683594},
{86.8, 44.31152344},
{86.5, 43.96972656},
{85.9, 43.48144531},
{85.4, 43.04199219},
{84.9, 42.65136719},
{84.4, 42.26074219},
{83.9, 41.87011719},
{83.3, 41.47949219},
{82.9, 41.13769531},
{82.4, 40.79589844},
{81.8, 40.45410156},
{81.5, 40.20996094},
{81, 39.91699219},
{80.5, 39.62402344},
{80.1, 39.37988281},
{79.7, 39.13574219},
{79.2, 38.89160156},
{78.8, 38.64746094},
{78.4, 38.45214844},
{77.9, 38.25683594},
{77.6, 38.11035156},
{77.2, 37.91503906},
{76.8, 37.76855469},
{76.4, 37.62207031},
{76, 37.47558594},
{75.5, 37.32910156},
{75.2, 37.23144531},
{74.8, 37.13378906},
{74.5, 37.03613281},
{74, 36.93847656},
{73.7, 36.88964844},
{73.3, 36.79199219},
{72.9, 36.74316406},
{72.5, 36.69433594},
{72.2, 36.64550781},
{71.8, 36.64550781},
{71.5, 36.64550781},
{71.1, 36.59667969},
{70.7, 36.59667969},
{70.4, 36.64550781},
{70, 36.64550781},
{69.7, 36.69433594},
{69.3, 36.74316406},
{68.9, 36.74316406},
{68.6, 36.84082031},
{68.2, 36.88964844},
{67.9, 36.98730469},
{67.5, 37.08496094},
{67.1, 37.13378906},
{66.8, 37.28027344},
{66.4, 37.37792969},
{66, 37.52441406},
{65.7, 37.67089844},
{65.3, 37.81738281},
{64.9, 37.96386719},
{64.5, 38.11035156},
{64.1, 38.30566406},
{63.8, 38.50097656},
{63.4, 38.69628906},
{63, 38.94042969},
{62.6, 39.13574219},
{62.2, 39.37988281},
{61.8, 39.62402344},
{61.5, 39.91699219},
{61.1, 40.20996094},
{60.7, 40.50292969},
{60.3, 40.79589844},
{59.9, 41.08627319},
{59.5, 41.41433716},
{59, 41.78070068},
{58.6, 42.14483643},
{58.2, 42.55084229},
{57.8, 42.90301514},
{57.3, 43.33499146},
{56.9, 43.76785278},
{56.4, 44.18273926},
{56, 44.6472168},
{55.5, 45.13687134},
{55.1, 45.63113403},
{54.6, 46.14691162},
{54.1, 46.69692993},
{53.6, 47.23535156},
{53.2, 47.82751465},
{52.7, 48.43264771},
{52.1, 49.04507446},
{51.7, 49.69198608},
{51.1, 50.36105347},
{50.6, 51.08416748},
{50.1, 51.83480835},
{49.5, 52.57888794},
{49.3, 53.01974487},
{49.6, 53.12182617},
{49.8, 53.18927002},
{50, 53.25622559},
{50.3, 53.39865112},
{50.6, 53.49725342},
{50.8, 53.64880371},
{51.1, 53.78933716},
{51.3, 53.98416138},
{51.6, 54.16760254},
{51.8, 54.36273193},
{52.1, 54.63388062},
{52.4, 54.8170166},
{52.6, 55.05706787},
{52.9, 55.37356567},
{53.2, 55.64611816},
{53.5, 55.96389771},
{53.8, 56.28240967},
{54.1, 56.60165405},
{54.4, 56.96704102},
{54.7, 57.37911987},
{55, 57.79266357},
{55.3, 58.20767212},
{55.6, 58.62414551},
{56, 59.11987305},
{56.3, 59.63265991},
{56.6, 60.10089111},
{57, 60.64971924},
{57.4, 61.20098877},
{57.7, 61.77017212},
{58.1, 62.42184448},
{58.5, 63.07693481},
{58.9, 63.73544312},
{59.3, 64.39736938},
{59.8, 65.1930542},
{60.2, 65.94238281},
{60.7, 66.72363281},
{61.1, 67.55371094},
{61.6, 68.43261719},
{62.1, 69.36035156},
{62.6, 70.28808594},
{63.1, 71.21582031},
{63.7, 72.29003906},
{64.3, 73.36425781},
{64.9, 74.43847656},
{65.5, 75.65917969},
{66.1, 76.78222656},
{66.8, 78.10058594},
{67.5, 79.41894531},
{68.2, 80.73730469},
{68.6, 81.81152344},
{68, 81.81152344},
{67.3, 81.81152344},
{66.7, 81.90917969},
{66.1, 81.95800781},
{65.6, 82.05566406},
{65, 82.15332031},
{64.5, 82.25097656},
{63.9, 82.39746094},
{63.4, 82.54394531},
{62.9, 82.69042969},
{62.4, 82.83691406},
{61.9, 82.98339844},
{61.5, 83.22753906},
{61, 83.32519531},
{60.6, 83.56933594},
{60.2, 83.76464844},
{59.8, 83.8961792},
{59.4, 84.15411377},
{59, 84.4052124},
{58.6, 84.6494751},
{58.2, 84.88690186},
{57.9, 85.13180542},
{57.5, 85.35690308},
{57.2, 85.63903809}
};

#include "hellwig_lib.h"

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 in = make_float3(p_R, p_G, p_B);
    float3 out = in;
    in.x = _clampf(in.x, -HALF_MAXIMUM, HALF_MAXIMUM);
    in.y = _clampf(in.y, -HALF_MAXIMUM, HALF_MAXIMUM);
    in.z = _clampf(in.z, -HALF_MAXIMUM, HALF_MAXIMUM);

    float3 inWhite = vector_dot(AP0_ACES_to_XYZ_matrix, make_float3(100.0f, 100.0f, 100.0f));
    float3 XYZ;

    if (!invert)
    {
        XYZ = vector_dot(AP0_ACES_to_XYZ_matrix, in);
    }
    else
    {
        in = float3spow(in, 2.4f);
        XYZ = vector_dot(RGB_to_XYZ_output, in);
    }
    XYZ *= referenceLuminance;
    float3 JMh;
    if (!invert)
    {
        JMh = XYZ_to_Hellwig2022_JMh(XYZ, inWhite);
        if (toneCurve)
        {
            JMh = forwardTonescale(JMh, compressChroma);
        }
        if (gamutCompress)
        {
            JMh = compressGamut(JMh, 0);
        }
    }
    else
    {
        JMh = XYZ_to_Hellwig2022_JMh(XYZ, d65White);
        if (gamutCompress)
        {
            JMh = compressGamut(JMh, 1);
        }
        if (toneCurve)
        {
            JMh = inverseTonescale(JMh, compressChroma);
        }
    }
    if (JMhOut)
    {
        out.x = JMh.x / referenceLuminance;
        out.y = JMh.y / referenceLuminance;
        out.z = JMh.z / 360.0f;
    }
    else
    {
        if (!invert)
        {
            XYZ = Hellwig2022_JMh_to_XYZ(JMh , d65White) / referenceLuminance;
            out = vector_dot(XYZ_to_RGB_output, XYZ);
            out = float3spow(out, 1.0f / 2.4f);
        }
        else
        {
            XYZ = Hellwig2022_JMh_to_XYZ(JMh , inWhite) / referenceLuminance;
            out = vector_dot(XYZ_to_AP0_ACES_matrix, XYZ);
        }
        // trap black pixel NaNs
        if (isnan(out.x) || isnan(out.y) || isnan(out.z))
        {
            out = make_float3(0.0f, 0.0f, 0.0f);
        }
    }

    return out ;
}