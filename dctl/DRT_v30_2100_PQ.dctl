DEFINE_UI_PARAMS(toneCurve, Tone Curve, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(compressChroma, Compress Chroma, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(gamutCompress, Gamut Compress, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(JMhOut, Diagnostic JMh Output, DCTLUI_CHECK_BOX, 0)

typedef struct
{
    float3 x;
    float3 y;
    float3 z;
} float3x3;

__CONSTANT__ float3x3 XYZ_to_RGB_output = {
// XYZ to BT.2020 matrix
    {  1.7166511880f, -0.3556707838f, -0.2533662814f},
    { -0.6666843518f,  1.6164812366f,  0.0157685458f},
    {  0.0176398574f, -0.0427706133f,  0.9421031212f}
};

__CONSTANT__ float3x3 RGB_to_XYZ_output = {
// BT.2020 to XYZ matrix
    {  0.6369580483f,  0.1446169036f,  0.1688809752f},
    {  0.2627002120f,  0.6779980715f,  0.0593017165f},
    {  0.0000000000f,  0.0280726930f,  1.0609850577f}
};

__CONSTANT__ float3x3 RGB_to_XYZ_limit = {
// P3-D65 to XYZ matrix
    {  0.4865709486f,  0.2656676932f,  0.1982172852f},
    {  0.2289745641f,  0.6917385218f,  0.0792869141f},
    { -0.0000000000f,  0.0451133819f,  1.0439443689f}
};

__CONSTANT__ float3 shadowCompressParams = {0.54f, 0.121f, 0.545f}; // 0.121 = max(0.121, 0.132 - 0.00002 * parent.ssts_luminance.z)
__CONSTANT__ float sat = 1.2f;
__CONSTANT__ float shadow_boost = 1.08f; // max(1.08, 1.21 - 0.00015 * parent.ssts_luminance.z)

__CONSTANT__ float limitJmax = 283.25f;

__CONSTANT__ float daniele_n = 1000.0f; // peak white  

// cusp values calculated using Python in https://github.com/nick-shaw/aces-ot-vwg-experiments/blob/d94d1d3b8891fcbd134d417d3374ecdffb4016e9/python/cusp_path.py
// (resulting values saved in ./data/J_cusp_BT709.txt and ./data/M_cusp_BT709.txt)
__CONSTANT__ float2 gamutCuspTable[360] = {
{174.3, 247.87494090},
{173.8, 247.24994105},
{173.2, 246.49994123},
{172.6, 245.74994141},
{172.1, 245.03236887},
{171.4, 244.24994177},
{170.8, 243.49994195},
{170.1, 242.62494215},
{169.4, 241.74994236},
{168.7, 240.87494257},
{167.9, 239.87494281},
{167.1, 238.87494305},
{166.3, 237.87494329},
{165.4, 236.74994355},
{164.6, 235.68530554},
{163.7, 234.57616529},
{162.8, 233.39249980},
{161.8, 232.24994463},
{160.9, 231.08152255},
{159.9, 229.87494519},
{158.9, 228.62494549},
{158.0, 227.40166247},
{157.0, 226.19492501},
{156.0, 224.97720122},
{155.0, 223.74994665},
{154.0, 222.49994695},
{154.6, 218.67242926},
{155.9, 213.83842668},
{157.1, 209.26927438},
{158.4, 204.99611950},
{159.6, 200.95503795},
{160.7, 197.14244589},
{161.9, 193.56127062},
{163.0, 190.17338604},
{164.1, 186.95472041},
{165.2, 183.86688864},
{166.2, 180.98940271},
{167.3, 178.22512063},
{168.3, 175.65433797},
{169.3, 173.19471994},
{170.3, 170.84102938},
{171.2, 168.64535809},
{172.2, 166.56501299},
{173.1, 164.55441222},
{174.1, 162.65415898},
{175.0, 160.89097649},
{175.9, 159.20405576},
{176.8, 157.59317660},
{177.7, 156.06806943},
{178.6, 154.60697597},
{179.4, 153.21925825},
{180.3, 151.95044598},
{181.2, 150.75474536},
{182.0, 149.56651270},
{182.9, 148.51663503},
{183.8, 147.47026974},
{184.6, 146.54710454},
{185.4, 145.62411135},
{186.3, 144.82892624},
{187.1, 144.02586123},
{188.0, 143.31714272},
{188.8, 142.65438986},
{189.6, 142.01759934},
{190.5, 141.49664417},
{191.3, 140.96270642},
{192.2, 140.51459545},
{193.0, 140.10521561},
{193.9, 139.73506686},
{194.7, 139.43649897},
{195.6, 139.16422713},
{196.4, 138.94932997},
{197.3, 138.80206570},
{198.2, 138.64143938},
{199.0, 138.57675880},
{199.9, 138.55764410},
{200.8, 138.58010650},
{201.7, 138.64416310},
{202.6, 138.74955231},
{203.5, 138.89599964},
{204.4, 139.08362615},
{205.4, 139.36482459},
{206.3, 139.63952342},
{207.3, 140.00790498},
{208.3, 140.38641360},
{209.3, 140.81817546},
{210.3, 141.32317266},
{211.3, 141.89605060},
{212.3, 142.47360066},
{213.4, 143.15154558},
{214.5, 143.84341612},
{215.6, 144.61381161},
{216.7, 145.45104504},
{217.8, 146.30863667},
{219.0, 147.27079868},
{220.2, 148.28102589},
{221.5, 149.34461117},
{222.7, 150.50876141},
{224.0, 151.72884464},
{225.4, 153.00614834},
{226.7, 154.38988209},
{228.1, 155.83426952},
{229.6, 157.39610195},
{231.1, 159.01944637},
{232.7, 160.75637341},
{234.3, 162.57770061},
{236.0, 164.47041035},
{237.7, 166.53106213},
{239.5, 168.67868900},
{241.4, 170.96550465},
{243.3, 173.33500385},
{244.5, 175.33285618},
{243.3, 176.00619793},
{242.1, 176.71144009},
{240.9, 177.48205662},
{239.8, 178.33378315},
{238.6, 179.28164005},
{237.4, 180.27269840},
{236.2, 181.31153584},
{235.0, 182.39529133},
{233.7, 183.60550404},
{232.5, 184.90040302},
{231.2, 186.21346951},
{230.0, 187.68460751},
{228.7, 189.17977810},
{227.4, 190.77193737},
{226.1, 192.46551991},
{224.8, 194.26553249},
{223.5, 196.17755413},
{222.1, 198.13134670},
{220.7, 200.20687580},
{219.3, 202.41100788},
{217.9, 204.75132465},
{216.5, 207.23583698},
{215.0, 209.79013711},
{213.5, 212.50427142},
{212.0, 215.34022927},
{210.4, 218.36579061},
{208.8, 221.53353810},
{207.2, 224.81970906},
{205.5, 228.38033840},
{203.8, 232.03467375},
{202.0, 236.00800574},
{200.2, 240.10612839},
{201.5, 237.20024422},
{202.9, 233.82591262},
{204.3, 230.55097881},
{205.7, 227.43341032},
{207.0, 224.33622390},
{208.2, 221.34082800},
{209.4, 218.36850733},
{210.5, 215.54873869},
{211.5, 212.68666461},
{212.6, 209.99372274},
{213.6, 207.26711154},
{214.5, 204.64072868},
{215.4, 202.04282230},
{216.3, 199.51922894},
{217.2, 197.04086781},
{218.0, 194.60499287},
{218.8, 192.20974445},
{219.6, 189.87672329},
{220.3, 187.53368855},
{221.1, 185.31825542},
{221.8, 183.09051991},
{222.5, 180.91785908},
{223.2, 178.79827023},
{223.9, 176.73003674},
{224.6, 174.71144199},
{225.3, 172.74091244},
{226.0, 170.77395916},
{226.6, 168.87638569},
{227.3, 167.04032421},
{227.9, 165.18580914},
{228.6, 163.42942715},
{229.2, 161.65115833},
{229.9, 159.96415615},
{230.5, 158.25669765},
{231.2, 156.64522648},
{231.9, 155.04648685},
{232.5, 153.50325108},
{233.2, 152.03397274},
{233.8, 150.56526661},
{234.5, 149.20427799},
{235.2, 147.89893627},
{235.9, 146.60975933},
{236.5, 145.40584087},
{237.2, 144.26672459},
{237.9, 143.18082333},
{238.6, 142.14627743},
{239.3, 141.16165638},
{240.0, 140.21666050},
{240.7, 139.31801319},
{241.4, 138.48187923},
{242.1, 137.68765926},
{242.8, 136.92791462},
{241.3, 135.19356251},
{239.6, 133.45963955},
{238.0, 131.80453777},
{236.4, 130.19979000},
{234.9, 128.68788242},
{233.4, 127.22232342},
{232.0, 125.84559917},
{230.5, 124.46815968},
{229.1, 123.17626476},
{227.8, 121.96834087},
{226.5, 120.76056004},
{225.1, 119.62487698},
{223.9, 118.55971813},
{222.6, 117.51487255},
{221.4, 116.53368473},
{220.2, 115.56522846},
{219.0, 114.67173100},
{217.8, 113.78924847},
{216.6, 112.93809414},
{215.5, 112.16005906},
{214.4, 111.41187906},
{213.3, 110.69286498},
{212.2, 110.00264114},
{211.2, 109.36140490},
{210.1, 108.74835464},
{209.1, 108.18294731},
{208.0, 107.60273695},
{207.0, 107.09074169},
{206.0, 106.60479963},
{205.1, 106.14490893},
{204.1, 105.74862376},
{203.1, 105.34173408},
{202.1, 104.95671609},
{201.2, 104.63853014},
{200.3, 104.31928071},
{199.3, 104.03320822},
{198.4, 103.78809214},
{197.5, 103.56704697},
{196.6, 103.37002510},
{195.7, 103.19068894},
{194.8, 103.04392684},
{193.9, 102.92294827},
{193.0, 102.82171458},
{192.1, 102.74458596},
{191.2, 102.69148421},
{190.4, 102.67266178},
{189.5, 102.70182386},
{188.6, 102.72178417},
{187.7, 102.76630118},
{186.9, 102.88040194},
{186.0, 102.97496617},
{185.2, 103.11150324},
{184.3, 103.28570953},
{183.4, 103.45729679},
{182.6, 103.70140988},
{181.7, 103.92608270},
{180.9, 104.20191702},
{180.0, 104.50442433},
{179.1, 104.81208757},
{178.3, 105.19627348},
{177.4, 105.56197613},
{176.6, 105.96600121},
{175.7, 106.43246862},
{174.8, 106.88985384},
{173.9, 107.37897822},
{173.1, 107.92351922},
{172.2, 108.50531906},
{171.3, 109.09739873},
{170.4, 109.72300172},
{169.5, 110.38498297},
{168.6, 111.08452588},
{167.7, 111.82266524},
{166.8, 112.60063112},
{165.9, 113.40354422},
{165.0, 114.22805876},
{164.0, 115.13084054},
{163.1, 116.06457493},
{162.1, 117.02136138},
{161.2, 118.04016054},
{160.2, 119.10500604},
{159.2, 120.19340968},
{158.2, 121.33498234},
{157.2, 122.53188479},
{156.2, 123.78641874},
{155.2, 125.10112762},
{154.2, 126.47379559},
{153.1, 127.85390279},
{152.1, 129.36003837},
{151.0, 130.87566942},
{149.9, 132.45962557},
{149.9, 133.17721167},
{150.5, 133.38209078},
{151.1, 133.62216511},
{151.8, 133.91942972},
{152.4, 134.26640832},
{153.0, 134.62487608},
{153.6, 135.00670767},
{154.3, 135.49015471},
{154.9, 135.94833395},
{155.6, 136.50864089},
{156.3, 137.05154434},
{156.9, 137.66946772},
{157.6, 138.34116817},
{158.3, 139.05099288},
{159.0, 139.79936868},
{159.7, 140.58683190},
{160.4, 141.41414034},
{161.2, 142.34733379},
{161.9, 143.26176837},
{162.7, 144.28379062},
{163.5, 145.33611014},
{164.3, 146.43624231},
{165.1, 147.61089858},
{165.9, 148.81173572},
{166.8, 150.08404076},
{167.6, 151.42537653},
{168.5, 152.84207985},
{169.4, 154.30941445},
{170.4, 155.83774495},
{171.3, 157.47546235},
{172.3, 159.17745331},
{173.3, 160.93608013},
{174.3, 162.75289258},
{175.4, 164.70516759},
{176.5, 166.71933398},
{177.6, 168.79718113},
{178.8, 171.01747763},
{180.0, 173.30578208},
{181.3, 175.66360053},
{182.5, 178.17143753},
{183.9, 180.81732461},
{185.3, 183.51888093},
{186.7, 186.38873300},
{188.2, 189.36775357},
{189.7, 192.42986974},
{191.4, 195.67156810},
{193.0, 199.06075805},
{194.8, 202.63661730},
{196.6, 206.30528563},
{198.5, 210.15382931},
{200.5, 214.18532327},
{202.6, 218.40280968},
{204.8, 222.80874109},
{207.1, 227.40549180},
{205.2, 228.30188692},
{203.3, 229.14131358},
{201.3, 230.01380834},
{199.5, 231.00752905},
{197.7, 231.94044712},
{195.9, 232.97519812},
{194.2, 233.94147652},
{192.5, 235.03832713},
{190.8, 236.11314261},
{189.2, 237.21984708},
{187.7, 238.30530134},
{186.1, 239.46539548},
{184.7, 240.62183198},
{183.2, 241.82640767},
{181.8, 243.02579302},
{180.5, 244.30999503},
{179.2, 245.53073740},
{177.9, 246.79649672},
{176.7, 248.08572820},
{175.5, 249.30276141},
{174.9, 248.62494072}
};

#include "hellwig_lib.h"

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 in = make_float3(p_R, p_G, p_B);
    float3 out = in;
    in.x = _clampf(in.x, -65504.0f, 65504.0f);
    in.y = _clampf(in.y, -65504.0f, 65504.0f);
    in.z = _clampf(in.z, -65504.0f, 65504.0f);

    float3 XYZ = vector_dot(AP0_ACES_to_XYZ_matrix, in);
    XYZ *= referenceLuminance;
    float3 inWhite = vector_dot(AP0_ACES_to_XYZ_matrix, make_float3(100.0f, 100.0f, 100.0f));
    float3 JMh = XYZ_to_Hellwig2022_JMh(XYZ, inWhite);
    if (toneCurve)
    {
        JMh = forwardTonescale(JMh, compressChroma);
    }
    if (gamutCompress)
    {
        JMh = compressGamut(JMh, 0);
    }
    if (JMhOut)
    {
        out.x = JMh.x / referenceLuminance;
        out.y = JMh.y / referenceLuminance;
        out.z = JMh.z / 360.0f;
    }
    else
    {
        XYZ = Hellwig2022_JMh_to_XYZ(JMh , d65White) / referenceLuminance;
        out = vector_dot(XYZ_to_RGB_output, XYZ);
        // trap black pixel NaNs
        if (isnan(JMh.x))
        {
            out = make_float3(0.0f, 0.0f, 0.0f);
        }
        out.x = linear_to_ST2084(out.x * 100.0f);
        out.y = linear_to_ST2084(out.y * 100.0f);
        out.z = linear_to_ST2084(out.z * 100.0f);
    }

    return out ;
}