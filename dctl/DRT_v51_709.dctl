DEFINE_UI_PARAMS(toneCurve, Tone Curve, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(compressChroma, Compress Chroma, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(gamutCompress, Gamut Compress, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(asPQ, Encode as BT.2100 PQ, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(invert, Invert, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(JMhOut, Diagnostic JMh Output, DCTLUI_CHECK_BOX, 0)


typedef struct
{
    float3 x;
    float3 y;
    float3 z;
} float3x3;

__CONSTANT__ float3x3 XYZ_to_RGB_output = {
// XYZ to sRGB matrix
    {  3.2409699419f, -1.5373831776f, -0.4986107603f},
    { -0.9692436363f,  1.8759675015f,  0.0415550574f},
    {  0.0556300797f, -0.2039769589f,  1.0569715142f}
};

__CONSTANT__ float3x3 RGB_to_XYZ_output = {
// sRGB to XYZ matrix
    {  0.4123907993f,  0.3575843394f,  0.1804807884f},
    {  0.2126390059f,  0.7151686788f,  0.0721923154f},
    {  0.0193308187f,  0.1191947798f,  0.9505321522f}
};

__CONSTANT__ float3x3 RGB_to_XYZ_limit = {
// sRGB to XYZ matrix
    {  0.4123907993f,  0.3575843394f,  0.1804807884f},
    {  0.2126390059f,  0.7151686788f,  0.0721923154f},
    {  0.0193308187f,  0.1191947798f,  0.9505321522f}
};

__CONSTANT__ float3x3 BT709_to_BT2020 = {
    {  0.6274038959, 0.3292830384, 0.0433130657},
    {  0.0690972894, 0.9195403951, 0.0113623156},
    {  0.0163914389, 0.0880133079, 0.8955952532}
};

__CONSTANT__ float limitJmax = 100.0f;

__CONSTANT__ float daniele_n = 100.0f; // peak white  

  // In-gamut compression scaling for HDR/SDR appearance match
//     float log_peak = log10(daniele_n / daniele_n_r);
//     sat = max(0.2f, 1.9f - 1.55f * log_peak);
//     sat_thr = max(0.00007f, 0.017f - 0.015f * log_peak);
//     ccParams.y = chromaCParams.y + 15.0f * log_peak;
//     ccParams.z = 1.0f / max(0.5f, chromaCParams.z - 0.2f * log_peak);

// log_peak is zero at 100 nits (log10(100/100 = log10(1) = 0))
__CONSTANT__ float sat = 1.9f;
__CONSTANT__ float sat_thr = 0.017f;
__CONSTANT__ float3 ccParams = {0.0f, 4.3f, 1.0f};
__CONSTANT__ float clamp_thr = 0.999f;
__CONSTANT__ float clamp_dist = 1.2f;

// cusp values saved using debugPrint in Blink implementation
__CONSTANT__ float3 gamutCuspTable[360] = {
{57.2702f, 90.4118f, 0.107347f},
{57.0261f, 90.836f, 1.05751f},
{56.7788f, 91.2297f, 2.04585f},
{56.5274f, 91.5763f, 3.07749f},
{56.2701f, 91.8564f, 4.15853f},
{56.0046f, 92.0474f, 5.29607f},
{55.7283f, 92.1242f, 6.49817f},
{55.4376f, 92.064f, 7.77402f},
{55.1292f, 91.8552f, 9.13366f},
{54.7992f, 91.4883f, 10.5885f},
{54.4433f, 90.9549f, 12.1512f},
{54.0572f, 90.2502f, 13.8345f},
{53.6364f, 89.3741f, 15.6521f},
{53.1769f, 88.3347f, 17.6157f},
{52.6755f, 87.1499f, 19.735f},
{52.1306f, 85.85f, 22.0146f},
{51.5425f, 84.4778f, 24.4519f},
{52.4988f, 81.375f, 26.0385f},
{53.4297f, 78.5297f, 27.6488f},
{54.3375f, 75.9179f, 29.2823f},
{55.2241f, 73.519f, 30.9383f},
{56.091f, 71.3152f, 32.6155f},
{56.9398f, 69.2907f, 34.3125f},
{57.7715f, 67.4321f, 36.0274f},
{58.5875f, 65.7272f, 37.7581f},
{59.3885f, 64.165f, 39.5024f},
{60.1754f, 62.7361f, 41.2576f},
{60.9491f, 61.4317f, 43.0209f},
{61.7102f, 60.2438f, 44.7897f},
{62.4594f, 59.1653f, 46.5608f},
{63.1972f, 58.1893f, 48.3311f},
{63.9241f, 57.3096f, 50.0976f},
{64.6408f, 56.5207f, 51.8572f},
{65.3475f, 55.817f, 53.6069f},
{66.0447f, 55.1935f, 55.3437f},
{66.7328f, 54.6454f, 57.0647f},
{67.4122f, 54.1684f, 58.7672f},
{68.0831f, 53.7579f, 60.4488f},
{68.7459f, 53.4101f, 62.1071f},
{69.4009f, 53.1212f, 63.7398f},
{70.0484f, 52.8874f, 65.3452f},
{70.6885f, 52.7053f, 66.9216f},
{71.3216f, 52.5717f, 68.4674f},
{71.9479f, 52.4833f, 69.9813f},
{72.5675f, 52.4373f, 71.4626f},
{73.1808f, 52.4308f, 72.9102f},
{73.7878f, 52.4612f, 74.3236f},
{74.3888f, 52.5259f, 75.7023f},
{74.9839f, 52.6227f, 77.0462f},
{75.5733f, 52.7492f, 78.355f},
{76.1572f, 52.9033f, 79.6289f},
{76.7357f, 53.0831f, 80.8681f},
{77.3089f, 53.2867f, 82.0731f},
{77.877f, 53.5123f, 83.2438f},
{78.4402f, 53.7583f, 84.3811f},
{78.9984f, 54.0231f, 85.4855f},
{79.552f, 54.3054f, 86.5575f},
{80.1009f, 54.6037f, 87.5979f},
{80.6453f, 54.9167f, 88.6075f},
{81.1852f, 55.2434f, 89.587f},
{81.7209f, 55.5825f, 90.5371f},
{82.2524f, 55.9331f, 91.4588f},
{82.7798f, 56.2943f, 92.3527f},
{83.3031f, 56.665f, 93.2198f},
{83.8225f, 57.0446f, 94.0607f},
{84.338f, 57.4321f, 94.8763f},
{84.8498f, 57.827f, 95.6677f},
{85.3578f, 58.2285f, 96.4353f},
{85.8623f, 58.6359f, 97.1801f},
{86.3631f, 59.0489f, 97.9029f},
{86.8605f, 59.4667f, 98.6043f},
{87.3545f, 59.8888f, 99.2851f},
{87.8452f, 60.3149f, 99.9459f},
{88.3326f, 60.7445f, 100.588f},
{88.8167f, 61.1772f, 101.211f},
{89.2977f, 61.6126f, 101.816f},
{89.7756f, 62.0503f, 102.404f},
{89.5584f, 62.0772f, 102.984f},
{89.3405f, 62.1109f, 103.566f},
{89.1219f, 62.1516f, 104.151f},
{88.9027f, 62.1993f, 104.739f},
{88.6827f, 62.2541f, 105.329f},
{88.4621f, 62.3162f, 105.921f},
{88.2407f, 62.3856f, 106.516f},
{88.0186f, 62.4625f, 107.112f},
{87.7958f, 62.5469f, 107.711f},
{87.5723f, 62.639f, 108.311f},
{87.348f, 62.7389f, 108.913f},
{87.123f, 62.8466f, 109.517f},
{86.8972f, 62.9623f, 110.122f},
{86.6707f, 63.086f, 110.728f},
{86.4434f, 63.218f, 111.336f},
{86.2153f, 63.3581f, 111.944f},
{85.9864f, 63.5068f, 112.554f},
{85.7568f, 63.6638f, 113.164f},
{85.5263f, 63.8294f, 113.775f},
{85.2951f, 64.0036f, 114.387f},
{85.063f, 64.1866f, 114.999f},
{84.8301f, 64.3785f, 115.611f},
{84.5964f, 64.5793f, 116.224f},
{84.3618f, 64.7891f, 116.836f},
{84.1264f, 65.0081f, 117.449f},
{83.8901f, 65.2363f, 118.061f},
{83.653f, 65.4739f, 118.673f},
{83.415f, 65.7208f, 119.284f},
{83.1761f, 65.9772f, 119.894f},
{82.9363f, 66.2432f, 120.504f},
{82.6956f, 66.5189f, 121.113f},
{82.4539f, 66.8043f, 121.72f},
{82.2114f, 67.0997f, 122.327f},
{81.9679f, 67.405f, 122.932f},
{81.7234f, 67.7203f, 123.536f},
{81.478f, 68.0457f, 124.138f},
{81.2316f, 68.3813f, 124.739f},
{80.9842f, 68.7272f, 125.337f},
{80.7359f, 69.0834f, 125.934f},
{80.4865f, 69.4502f, 126.529f},
{80.2361f, 69.8275f, 127.121f},
{79.9847f, 70.2154f, 127.712f},
{79.7322f, 70.6141f, 128.3f},
{79.4787f, 71.0235f, 128.885f},
{79.2241f, 71.4439f, 129.468f},
{78.9684f, 71.8752f, 130.048f},
{78.7116f, 72.3176f, 130.626f},
{78.4537f, 72.7712f, 131.201f},
{78.1946f, 73.2359f, 131.772f},
{77.9345f, 73.7121f, 132.341f},
{77.6731f, 74.1997f, 132.907f},
{77.4106f, 74.6988f, 133.469f},
{77.1469f, 75.2095f, 134.029f},
{76.882f, 75.7319f, 134.585f},
{76.6158f, 76.2662f, 135.137f},
{76.3484f, 76.8124f, 135.686f},
{76.0798f, 77.3705f, 136.232f},
{75.8099f, 77.9407f, 136.774f},
{75.5387f, 78.5232f, 137.313f},
{75.2661f, 79.118f, 137.848f},
{75.6024f, 78.0219f, 138.66f},
{75.9295f, 76.939f, 139.49f},
{76.247f, 75.8711f, 140.34f},
{76.555f, 74.8195f, 141.206f},
{76.8535f, 73.7852f, 142.09f},
{77.1424f, 72.7697f, 142.99f},
{77.4218f, 71.774f, 143.904f},
{77.6919f, 70.7993f, 144.833f},
{77.9529f, 69.8462f, 145.775f},
{78.2051f, 68.9158f, 146.73f},
{78.4488f, 68.0088f, 147.696f},
{78.6842f, 67.1258f, 148.673f},
{78.9118f, 66.2673f, 149.66f},
{79.1318f, 65.4337f, 150.656f},
{79.3448f, 64.6253f, 151.659f},
{79.551f, 63.8424f, 152.67f},
{79.7508f, 63.0849f, 153.688f},
{79.9448f, 62.3531f, 154.711f},
{80.1331f, 61.6469f, 155.739f},
{80.3163f, 60.9661f, 156.77f},
{80.4947f, 60.3106f, 157.805f},
{80.6685f, 59.6802f, 158.843f},
{80.8383f, 59.0747f, 159.882f},
{81.0043f, 58.4935f, 160.922f},
{81.1669f, 57.9363f, 161.962f},
{81.3262f, 57.4029f, 163.002f},
{81.4826f, 56.8927f, 164.041f},
{81.6364f, 56.4052f, 165.078f},
{81.7878f, 55.9398f, 166.113f},
{81.9371f, 55.496f, 167.146f},
{82.0845f, 55.0732f, 168.174f},
{82.2301f, 54.6706f, 169.199f},
{82.3743f, 54.2877f, 170.219f},
{82.5171f, 53.9236f, 171.234f},
{82.6588f, 53.5777f, 172.243f},
{82.7995f, 53.2487f, 173.246f},
{82.9395f, 52.9361f, 174.243f},
{83.0788f, 52.6388f, 175.233f},
{83.2177f, 52.3572f, 176.215f},
{83.3562f, 52.0915f, 177.19f},
{83.4944f, 51.8423f, 178.157f},
{83.6324f, 51.6097f, 179.115f},
{83.7702f, 51.3939f, 180.065f},
{83.9079f, 51.195f, 181.006f},
{84.0454f, 51.0128f, 181.938f},
{84.1828f, 50.847f, 182.861f},
{84.3201f, 50.6977f, 183.774f},
{84.4572f, 50.5638f, 184.677f},
{84.5942f, 50.4455f, 185.57f},
{84.7311f, 50.3417f, 186.453f},
{84.8679f, 50.2521f, 187.325f},
{85.0045f, 50.1763f, 188.188f},
{85.1411f, 50.1134f, 189.039f},
{85.2776f, 50.063f, 189.88f},
{85.414f, 50.0247f, 190.711f},
{85.5504f, 49.9975f, 191.53f},
{85.6866f, 49.9815f, 192.339f},
{85.8229f, 49.9759f, 193.136f},
{85.9591f, 49.9803f, 193.923f},
{86.0953f, 49.9942f, 194.699f},
{85.564f, 49.6861f, 195.477f},
{85.0289f, 49.3845f, 196.27f},
{84.4902f, 49.0894f, 197.078f},
{83.9477f, 48.8013f, 197.902f},
{83.4013f, 48.5204f, 198.741f},
{82.8511f, 48.247f, 199.596f},
{82.297f, 47.9815f, 200.466f},
{81.7389f, 47.724f, 201.353f},
{81.1767f, 47.475f, 202.256f},
{80.6105f, 47.2348f, 203.174f},
{80.0401f, 47.0038f, 204.109f},
{79.4654f, 46.7821f, 205.06f},
{78.8865f, 46.5704f, 206.028f},
{78.3033f, 46.3688f, 207.011f},
{77.7157f, 46.1777f, 208.011f},
{77.1236f, 45.9977f, 209.027f},
{76.527f, 45.829f, 210.059f},
{75.9258f, 45.672f, 211.106f},
{75.3201f, 45.5271f, 212.169f},
{74.7095f, 45.3947f, 213.248f},
{74.0943f, 45.2751f, 214.342f},
{73.4743f, 45.1689f, 215.45f},
{72.8493f, 45.0764f, 216.573f},
{72.2195f, 44.9979f, 217.71f},
{71.5846f, 44.9339f, 218.861f},
{70.9447f, 44.8849f, 220.026f},
{70.2997f, 44.8511f, 221.203f},
{69.6495f, 44.8329f, 222.392f},
{68.9941f, 44.8306f, 223.593f},
{68.3335f, 44.8448f, 224.806f},
{67.6674f, 44.8757f, 226.029f},
{66.9961f, 44.9237f, 227.262f},
{66.3192f, 44.9891f, 228.504f},
{65.6369f, 45.0722f, 229.755f},
{64.9491f, 45.1734f, 231.014f},
{64.2556f, 45.2929f, 232.28f},
{63.5566f, 45.4311f, 233.552f},
{62.8519f, 45.5882f, 234.831f},
{62.1415f, 45.7645f, 236.114f},
{61.4254f, 45.9601f, 237.402f},
{60.7035f, 46.1754f, 238.693f},
{59.9759f, 46.4106f, 239.988f},
{59.2425f, 46.6658f, 241.285f},
{58.5032f, 46.9412f, 242.583f},
{57.7582f, 47.2371f, 243.882f},
{57.0073f, 47.5534f, 245.182f},
{56.2506f, 47.8905f, 246.482f},
{55.488f, 48.2486f, 247.781f},
{54.7197f, 48.6275f, 249.079f},
{53.9456f, 49.0276f, 250.375f},
{53.1658f, 49.449f, 251.67f},
{52.3802f, 49.8917f, 252.962f},
{51.589f, 50.3558f, 254.251f},
{50.7922f, 50.8416f, 255.538f},
{49.9899f, 51.3492f, 256.822f},
{49.1821f, 51.8787f, 258.102f},
{48.3689f, 52.4302f, 259.38f},
{47.5505f, 53.004f, 260.654f},
{46.7269f, 53.6002f, 261.925f},
{45.8983f, 54.2192f, 263.194f},
{46.297f, 53.7452f, 265.015f},
{46.6943f, 53.3271f, 266.846f},
{47.0901f, 52.9644f, 268.68f},
{47.4844f, 52.6561f, 270.516f},
{47.8772f, 52.4013f, 272.35f},
{48.2686f, 52.1989f, 274.178f},
{48.6584f, 52.0477f, 275.997f},
{49.0467f, 51.9462f, 277.803f},
{49.4335f, 51.8931f, 279.593f},
{49.8187f, 51.8867f, 281.364f},
{50.2025f, 51.9254f, 283.114f},
{50.5846f, 52.0075f, 284.839f},
{50.9653f, 52.1312f, 286.538f},
{51.3444f, 52.2947f, 288.209f},
{51.7219f, 52.4961f, 289.849f},
{52.098f, 52.7336f, 291.457f},
{52.4724f, 53.0053f, 293.032f},
{52.8453f, 53.3093f, 294.573f},
{53.2166f, 53.644f, 296.078f},
{53.5864f, 54.0073f, 297.548f},
{53.9547f, 54.3976f, 298.982f},
{54.3213f, 54.8132f, 300.379f},
{54.6864f, 55.2525f, 301.74f},
{55.05f, 55.7138f, 303.065f},
{55.412f, 56.1955f, 304.354f},
{55.7724f, 56.6962f, 305.607f},
{56.1312f, 57.2145f, 306.825f},
{56.4885f, 57.7491f, 308.009f},
{56.8443f, 58.2986f, 309.159f},
{57.1984f, 58.8618f, 310.276f},
{57.5511f, 59.4376f, 311.36f},
{57.9021f, 60.0248f, 312.413f},
{58.2517f, 60.6224f, 313.435f},
{58.5997f, 61.2294f, 314.428f},
{58.9462f, 61.8451f, 315.391f},
{59.2911f, 62.4682f, 316.326f},
{59.6346f, 63.0984f, 317.234f},
{59.9764f, 63.7346f, 318.116f},
{60.3168f, 64.3761f, 318.972f},
{60.6558f, 65.0223f, 319.804f},
{60.9931f, 65.6726f, 320.611f},
{61.329f, 66.3265f, 321.396f},
{61.6635f, 66.9832f, 322.159f},
{61.9964f, 67.6424f, 322.9f},
{62.3279f, 68.3036f, 323.62f},
{62.6579f, 68.9664f, 324.321f},
{62.9865f, 69.6303f, 325.002f},
{63.3136f, 70.2949f, 325.665f},
{63.6393f, 70.9599f, 326.309f},
{63.9636f, 71.6249f, 326.937f},
{64.2864f, 72.2897f, 327.548f},
{64.6078f, 72.954f, 328.143f},
{64.9279f, 73.6176f, 328.723f},
{65.2465f, 74.2801f, 329.287f},
{65.5637f, 74.9414f, 329.838f},
{65.8796f, 75.6013f, 330.374f},
{66.1941f, 76.2596f, 330.898f},
{66.5072f, 76.916f, 331.408f},
{66.819f, 77.5706f, 331.906f},
{67.1295f, 78.2229f, 332.392f},
{66.9169f, 78.3561f, 332.873f},
{66.704f, 78.4948f, 333.358f},
{66.4905f, 78.6391f, 333.849f},
{66.2767f, 78.7891f, 334.343f},
{66.0624f, 78.9449f, 334.843f},
{65.8476f, 79.1065f, 335.347f},
{65.6324f, 79.274f, 335.857f},
{65.4168f, 79.4474f, 336.371f},
{65.2007f, 79.6268f, 336.89f},
{64.9842f, 79.8123f, 337.414f},
{64.7673f, 80.004f, 337.944f},
{64.5499f, 80.2018f, 338.479f},
{64.332f, 80.4058f, 339.019f},
{64.1137f, 80.6163f, 339.565f},
{63.895f, 80.833f, 340.117f},
{63.6758f, 81.0559f, 340.675f},
{63.4561f, 81.2854f, 341.239f},
{63.236f, 81.5213f, 341.809f},
{63.0154f, 81.7637f, 342.385f},
{62.7942f, 82.0126f, 342.968f},
{62.5726f, 82.2681f, 343.558f},
{62.3505f, 82.5302f, 344.155f},
{62.1278f, 82.7989f, 344.759f},
{61.9045f, 83.0746f, 345.371f},
{61.6807f, 83.357f, 345.991f},
{61.4562f, 83.6464f, 346.62f},
{61.2311f, 83.9431f, 347.257f},
{61.0053f, 84.247f, 347.903f},
{60.7788f, 84.5586f, 348.559f},
{60.5515f, 84.8782f, 349.225f},
{60.3235f, 85.2062f, 349.902f},
{60.0946f, 85.5431f, 350.59f},
{59.8648f, 85.8895f, 351.291f},
{59.6341f, 86.2461f, 352.004f},
{59.4025f, 86.6135f, 352.731f},
{59.1699f, 86.9929f, 353.472f},
{58.9362f, 87.3846f, 354.23f},
{58.7016f, 87.7891f, 355.004f},
{58.4659f, 88.2066f, 355.797f},
{58.2292f, 88.6362f, 356.61f},
{57.9914f, 89.076f, 357.445f},
{57.7525f, 89.5225f, 358.305f},
{57.5122f, 89.9704f, 359.191f}
};

__CONSTANT__ float upperHullGamma[36] = {
0.81f,
0.833f,
0.91f,
1.0f,
1.16f,
1.14f,
1.29f,
1.49f,
1.46f,
1.82f,
2.1f,
1.2f,
1.3f,
1.2f,
1.29f,
1.02f,
1.0f,
0.96f,
1.01f,
1.02f,
1.059f,
1.1f,
1.23f,
1.11f,
1.14f,
1.14f,
1.15f,
1.13f,
1.15f,
1.15f,
1.18f,
1.08f,
1.2f,
1.1f,
0.9f,
0.98f
};

__CONSTANT__ float gamutCuspTableAP1[360] = {
197.0f,
199.0f,
202.0f,
203.0f,
205.0f,
206.0f,
207.0f,
207.0f,
207.0f,
207.0f,
207.0f,
206.0f,
205.0f,
204.0f,
203.0f,
202.0f,
200.0f,
199.0f,
198.0f,
197.0f,
194.0f,
187.0f,
181.0f,
175.0f,
169.0f,
164.0f,
159.0f,
154.0f,
150.0f,
146.0f,
142.0f,
139.0f,
136.0f,
132.0f,
130.0f,
127.0f,
124.0f,
122.0f,
119.0f,
117.0f,
115.0f,
113.0f,
111.0f,
109.0f,
108.0f,
106.0f,
104.0f,
103.0f,
101.0f,
100.0f,
99.0f,
98.0f,
96.0f,
95.0f,
94.0f,
93.0f,
92.0f,
91.0f,
91.0f,
90.0f,
89.0f,
88.0f,
88.0f,
87.0f,
86.0f,
86.0f,
85.0f,
85.0f,
84.0f,
84.0f,
83.0f,
83.0f,
82.0f,
82.0f,
82.0f,
82.0f,
81.0f,
81.0f,
81.0f,
81.0f,
80.0f,
80.0f,
80.0f,
80.0f,
80.0f,
80.0f,
80.0f,
80.0f,
80.0f,
80.0f,
80.0f,
80.0f,
80.0f,
81.0f,
81.0f,
81.0f,
81.0f,
82.0f,
82.0f,
82.0f,
83.0f,
83.0f,
83.0f,
84.0f,
84.0f,
85.0f,
85.0f,
86.0f,
86.0f,
87.0f,
88.0f,
88.0f,
89.0f,
90.0f,
91.0f,
92.0f,
92.0f,
93.0f,
94.0f,
95.0f,
97.0f,
98.0f,
99.0f,
100.0f,
102.0f,
103.0f,
104.0f,
106.0f,
108.0f,
109.0f,
111.0f,
113.0f,
115.0f,
117.0f,
120.0f,
122.0f,
125.0f,
127.0f,
130.0f,
133.0f,
136.0f,
140.0f,
143.0f,
147.0f,
151.0f,
155.0f,
160.0f,
161.0f,
160.0f,
158.0f,
157.0f,
155.0f,
154.0f,
153.0f,
152.0f,
150.0f,
149.0f,
148.0f,
147.0f,
146.0f,
145.0f,
144.0f,
143.0f,
142.0f,
142.0f,
141.0f,
140.0f,
139.0f,
138.0f,
137.0f,
136.0f,
135.0f,
134.0f,
133.0f,
133.0f,
132.0f,
131.0f,
129.0f,
128.0f,
127.0f,
126.0f,
125.0f,
124.0f,
123.0f,
122.0f,
122.0f,
121.0f,
120.0f,
119.0f,
118.0f,
118.0f,
117.0f,
116.0f,
116.0f,
115.0f,
114.0f,
114.0f,
113.0f,
113.0f,
112.0f,
112.0f,
111.0f,
111.0f,
111.0f,
110.0f,
110.0f,
109.0f,
109.0f,
109.0f,
108.0f,
108.0f,
108.0f,
108.0f,
107.0f,
107.0f,
107.0f,
107.0f,
107.0f,
106.0f,
106.0f,
106.0f,
106.0f,
106.0f,
106.0f,
106.0f,
106.0f,
106.0f,
106.0f,
106.0f,
106.0f,
106.0f,
106.0f,
106.0f,
106.0f,
107.0f,
107.0f,
107.0f,
107.0f,
107.0f,
108.0f,
108.0f,
108.0f,
109.0f,
109.0f,
109.0f,
110.0f,
110.0f,
111.0f,
111.0f,
112.0f,
112.0f,
113.0f,
113.0f,
114.0f,
115.0f,
115.0f,
114.0f,
113.0f,
112.0f,
111.0f,
110.0f,
109.0f,
108.0f,
108.0f,
107.0f,
106.0f,
105.0f,
105.0f,
104.0f,
103.0f,
103.0f,
102.0f,
102.0f,
101.0f,
101.0f,
101.0f,
100.0f,
100.0f,
100.0f,
99.0f,
99.0f,
99.0f,
99.0f,
99.0f,
98.0f,
98.0f,
98.0f,
98.0f,
98.0f,
98.0f,
98.0f,
98.0f,
98.0f,
99.0f,
99.0f,
99.0f,
99.0f,
99.0f,
100.0f,
100.0f,
100.0f,
101.0f,
101.0f,
101.0f,
102.0f,
102.0f,
103.0f,
103.0f,
104.0f,
104.0f,
105.0f,
106.0f,
106.0f,
107.0f,
108.0f,
109.0f,
110.0f,
111.0f,
112.0f,
112.0f,
114.0f,
115.0f,
116.0f,
117.0f,
118.0f,
119.0f,
121.0f,
122.0f,
123.0f,
125.0f,
126.0f,
128.0f,
130.0f,
131.0f,
133.0f,
135.0f,
137.0f,
139.0f,
141.0f,
143.0f,
145.0f,
147.0f,
149.0f,
152.0f,
154.0f,
156.0f,
159.0f,
161.0f,
164.0f,
166.0f,
169.0f,
172.0f,
175.0f,
177.0f,
180.0f,
183.0f,
186.0f,
189.0f,
192.0f,
194.0f
};

#include "hellwig_lib_v051.h"

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 in = make_float3(p_R, p_G, p_B);
    float3 out = in;
    in.x = _clampf(in.x, -HALF_MAXIMUM, HALF_MAXIMUM);
    in.y = _clampf(in.y, -HALF_MAXIMUM, HALF_MAXIMUM);
    in.z = _clampf(in.z, -HALF_MAXIMUM, HALF_MAXIMUM);

    float3 inWhite = vector_dot(AP0_ACES_to_XYZ_matrix, make_float3(100.0f, 100.0f, 100.0f));
    float3 XYZ;

    if (!invert)
    {
        XYZ = vector_dot(AP0_ACES_to_XYZ_matrix, in);
    }
    else
    {
        in = float3spow(in, 2.4f);
        XYZ = vector_dot(RGB_to_XYZ_output, in);
    }
    XYZ *= referenceLuminance;
    float3 JMh;
    if (!invert)
    {
        JMh = XYZ_to_Hellwig2022_JMh(XYZ, inWhite);
        if (toneCurve)
        {
            JMh = forwardTonescale(JMh, compressChroma);
        }
        if (gamutCompress)
        {
            JMh = compressGamut(JMh, 0);
        }
    }
    else
    {
        JMh = XYZ_to_Hellwig2022_JMh(XYZ, d65White);
        if (gamutCompress)
        {
            JMh = compressGamut(JMh, 1);
        }
        if (toneCurve)
        {
            JMh = inverseTonescale(JMh, compressChroma);
        }
    }
    if (JMhOut)
    {
        out.x = JMh.x / referenceLuminance;
        out.y = JMh.y / referenceLuminance;
        out.z = JMh.z / 360.0f;
    }
    else
    {
        if (!invert)
        {
            XYZ = Hellwig2022_JMh_to_XYZ(JMh , d65White) / referenceLuminance;
            out = vector_dot(XYZ_to_RGB_output, XYZ);

            // Soft clamp by compressing negative display linear values
            float3 compr = make_float3(clamp_thr, clamp_dist, 1.2f);
            out = compress_aces(out, compr, compr, compr, 0);

            // hard clip 0-1
            out = clamp3(out, 0.0f, 1.0f);
            
            if (asPQ)
            {
                out = 100.0f * vector_dot(BT709_to_BT2020, out);
                out.x = linear_to_ST2084(out.x);
                out.y = linear_to_ST2084(out.y);
                out.z = linear_to_ST2084(out.z);
            }
            else
            {
                out = float3spow(out, 1.0f / 2.4f);
            }
        }
        else
        {
            XYZ = Hellwig2022_JMh_to_XYZ(JMh , inWhite) / referenceLuminance;
            out = vector_dot(XYZ_to_AP0_ACES_matrix, XYZ);
        }
        // trap black pixel NaNs
        if (isnan(out.x) || isnan(out.y) || isnan(out.z))
        {
            out = make_float3(0.0f, 0.0f, 0.0f);
        }
    }

    return out ;
}